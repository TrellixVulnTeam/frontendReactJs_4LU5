{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nlet initialState = {\n  skills: [],\n  selectedSkill: {},\n  errors: \"\"\n};\nconst skillsSlice = createSlice({\n  name: \"skills\",\n  initialState,\n  reducers: {\n    populateSkills(state, action) {\n      state.skills = action.payload;\n    },\n\n    selectSkill(state, action) {\n      state.populateSkills = action.payload;\n    },\n\n    addSkill: (state, action) => {\n      const payload = action.payload;\n      state.skills.push(payload);\n    },\n    deleteSkill: (state, action) => {\n      const payload = action.payload;\n      const index = state.skills.findIndex(skill => skill._id === payload);\n\n      if (index !== -1) {\n        state.skills.splice(index, 1);\n      }\n    },\n    updateSkill: (state, action) => {\n      const payload = action.payload;\n      state.skills.set(payload);\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    }\n\n  }\n});\nexport const fetchSkills = () => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"appliation/json\",\n      Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n    }\n  };\n  axios.get(`/skill/getAll`, config).then(response => {\n    dispatch(populateSkills(response.data));\n    console.log(response.data);\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const selectSkills = state => {\n  return [state.skills.skills, state.skills.errors];\n};\nexport const {\n  populateSkills,\n  addSkill,\n  setErrors,\n  deleteSkill,\n  selectSkill,\n  updateSkill\n} = skillsSlice.actions;\nexport default skillsSlice.reducer;","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/redux/slices/skillSlice.js"],"names":["createSlice","axios","initialState","skills","selectedSkill","errors","skillsSlice","name","reducers","populateSkills","state","action","payload","selectSkill","addSkill","push","deleteSkill","index","findIndex","skill","_id","splice","updateSkill","set","setErrors","fetchSkills","dispatch","config","headers","Authorization","localStorage","getItem","get","then","response","data","console","log","catch","error","selectSkills","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\nlet initialState = {\r\n    skills: [],\r\n    selectedSkill: {},\r\n    errors: \"\",\r\n    };\r\nconst skillsSlice=createSlice({\r\n    name: \"skills\",\r\n    initialState,\r\n    reducers: {\r\n        populateSkills(state, action) {\r\n        state.skills = action.payload;\r\n        },\r\n        selectSkill(state, action) {\r\n            state.populateSkills = action.payload;\r\n            },\r\n        addSkill: (state, action) => {\r\n            const payload = action.payload;\r\n            state.skills.push(payload);\r\n            },\r\n        deleteSkill: (state, action) => {\r\n            const payload = action.payload;\r\n            const index = state.skills.findIndex((skill) => skill._id === payload);\r\n            if (index !== -1) {\r\n                state.skills.splice(index, 1);\r\n                               }\r\n       },\r\n       updateSkill: (state, action) => {\r\n        const payload = action.payload;\r\n        state.skills.set(payload);\r\n                           },\r\n      \r\n    \r\n         setErrors(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n        \r\n\r\nexport const fetchSkills=()=>async(dispatch)=>{\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"appliation/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n        }\r\n    }\r\n    axios.get(`/skill/getAll`, config)\r\n                .then((response) => {\r\n                 dispatch(populateSkills(response.data));\r\n                 console.log(response.data)\r\n                })\r\n                .catch((error) => {\r\n                  console.log(error)\r\n                })\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const selectSkills=(state)=>{\r\n    return [state.skills.skills,state.skills.errors];\r\n}\r\nexport const {populateSkills,addSkill,setErrors,deleteSkill,selectSkill,updateSkill}=skillsSlice.actions;\r\nexport default skillsSlice.reducer;"]},"metadata":{},"sourceType":"module"}