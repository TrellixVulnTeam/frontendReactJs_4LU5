{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siwar\\\\Desktop\\\\front\\\\src\\\\user\\\\components\\\\screens\\\\ResetPasswordScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport axios from 'axios';\nimport \"./screen.css\";\nimport ReactNotification from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\nimport { store } from 'react-notifications-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ResetPasswordScreen = ({\n  history,\n  match\n}) => {\n  _s();\n\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const resetPasswordHandler = async e => {\n    e.preventDefault();\n    const config = {\n      header: {\n        \"Content-Type\": \"appliation/json\"\n      }\n    };\n\n    if (password !== confirmPassword) {\n      setPassword(\"\");\n      setConfirmPassword(\"\");\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n      return setError(\"Passwords do not match\");\n    }\n\n    try {\n      const {\n        data\n      } = await axios.post(`/api/auth/resetpassword/${match.params.token}`, {\n        password\n      }, config);\n      console.log(data);\n      setSuccess(data.data);\n      store.addNotification({\n        title: \"Succeeded\",\n        message: \"Your password has been changed with success\",\n        type: \"success\",\n        insert: \"top\",\n        container: \"top-right\",\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n        dismiss: {\n          duration: 3000,\n          onScreen: true\n        }\n      });\n      history.goBack();\n    } catch (error) {\n      setError(error.response.data.error);\n      setTimeout(() => {\n        setError(\"\");\n      }, 5000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    style: {\n      background: \"#f3f4f6\",\n      height: \"650px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactNotification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"lg:p-12 max-w-xl lg:my-0 my-12 mx-auto p-6 space-y-\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: resetPasswordHandler,\n        class: \"lg:p-10 p-6 space-y-3 relative bg-white shadow-xl rounded-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          class: \"lg:text-2xl text-xl font-semibold mb-6\",\n          children: \" Reset Password \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this), success && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [success, \" \", /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/login\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            class: \"mb-0\",\n            children: \" New Password \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"******\",\n            id: \"password\",\n            required: true,\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            class: \"bg-gray-100 h-12 mt-2 px-3 rounded-md w-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"confpassword\",\n            class: \"mb-0\",\n            children: \" Confirm Password \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"******\",\n            id: \"confpassword\",\n            required: true,\n            value: confirmPassword,\n            onChange: e => setConfirmPassword(e.target.value),\n            class: \"bg-gray-100 h-12 mt-2 px-3 rounded-md w-full\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'red'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            class: \"bg-blue-600 font-semibold p-2 mt-5 rounded-md text-center text-white w-full\",\n            children: \"Reset Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ResetPasswordScreen, \"gM6RkExoXTmd1ipYnQSS6ckOHjk=\");\n\n_c = ResetPasswordScreen;\nexport default ResetPasswordScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPasswordScreen\");","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/user/components/screens/ResetPasswordScreen.js"],"names":["React","useState","Link","axios","ReactNotification","store","ResetPasswordScreen","history","match","password","setPassword","confirmPassword","setConfirmPassword","success","setSuccess","error","setError","resetPasswordHandler","e","preventDefault","config","header","setTimeout","data","post","params","token","console","log","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","goBack","response","background","height","target","value","color"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport \"./screen.css\";\r\nimport ReactNotification from 'react-notifications-component'\r\nimport 'react-notifications-component/dist/theme.css'\r\nimport { store } from 'react-notifications-component';\r\n\r\nconst ResetPasswordScreen = ({history, match}) =>{\r\n\r\n    const [password, setPassword]= useState(\"\");\r\n    const [confirmPassword, setConfirmPassword]= useState(\"\");\r\n    const [success, setSuccess]= useState(\"\");\r\n    const [error, setError]= useState(\"\");\r\n\r\n    const resetPasswordHandler = async (e) =>{\r\n        e.preventDefault();\r\n        const config = {\r\n            header: {\r\n                \"Content-Type\":\"appliation/json\"\r\n            },\r\n        };\r\n\r\n        if(password !== confirmPassword){\r\n            setPassword(\"\");\r\n            setConfirmPassword(\"\");\r\n            setTimeout(() =>{\r\n                setError(\"\")\r\n            }, 5000);\r\n            return setError(\"Passwords do not match\")\r\n        }\r\n\r\n        try {\r\n            const {data} = await axios.post(\r\n            `/api/auth/resetpassword/${match.params.token}`,\r\n            {\r\n                password,\r\n            },\r\n                config\r\n                );\r\n            console.log(data);\r\n            setSuccess(data.data);\r\n            store.addNotification({\r\n                title: \"Succeeded\",\r\n                message: \"Your password has been changed with success\",\r\n                type: \"success\",\r\n                insert: \"top\",\r\n                container: \"top-right\",\r\n                animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n                animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n                dismiss: {\r\n                  duration: 3000,\r\n                  onScreen: true\r\n                }\r\n              });\r\n              history.goBack();\r\n        } catch (error) {\r\n            setError(error.response.data.error);\r\n            setTimeout(() => {\r\n                setError(\"\");\r\n            }, 5000);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <body style={{background:\"#f3f4f6\",height:\"650px\"}}>\r\n            <ReactNotification/>\r\n                <div class=\"lg:p-12 max-w-xl lg:my-0 my-12 mx-auto p-6 space-y-\">\r\n                    <form onSubmit={resetPasswordHandler} class=\"lg:p-10 p-6 space-y-3 relative bg-white shadow-xl rounded-md\">\r\n                        <h1 class=\"lg:text-2xl text-xl font-semibold mb-6\"> Reset Password </h1>\r\n                        {success && (\r\n                            <span>\r\n                                {success} <Link to=\"/login\">Login</Link>\r\n                            </span>\r\n                        )}\r\n                      \r\n                        <div>\r\n                            <label htmlFor=\"password\" class=\"mb-0\"> New Password </label>\r\n                            <input type=\"password\" placeholder=\"******\" id=\"password\" required value={password} onChange={(e) => setPassword(e.target.value)} class=\"bg-gray-100 h-12 mt-2 px-3 rounded-md w-full\"/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"confpassword\" class=\"mb-0\"> Confirm Password </label>\r\n                            <input type=\"password\" placeholder=\"******\" id=\"confpassword\" required value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} class=\"bg-gray-100 h-12 mt-2 px-3 rounded-md w-full\"/>\r\n                        </div>\r\n                        {error && <span style={{color:'red'}}>{error}</span>}\r\n                        <div>\r\n                            <button type=\"submit\" class=\"bg-blue-600 font-semibold p-2 mt-5 rounded-md text-center text-white w-full\">\r\n                                Reset Email</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n        </body>\r\n    )\r\n\r\n}\r\n\r\nexport default ResetPasswordScreen;"]},"metadata":{},"sourceType":"module"}