{"ast":null,"code":"import axios from \"axios\";\nimport { GET_POSTS, DELETE_POST, POST_SAVED, RESET_SAVED, POST_UPDATED } from \"./types\";\nconst config = {\n  headers: {\n    \"Content-Type\": \"appliation/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n  }\n};\nexport const getPosts = () => {\n  return async dispatch => {\n    return await axios.get(\"http://localhost:3000/pi/postRoute/post\").then(res => {\n      dispatch({\n        type: GET_POSTS,\n        payload: res.data\n      });\n    }).catch(err => console.log(err));\n  };\n};\nexport const deletePost = postId => {\n  return async dispatch => {\n    try {\n      const res = await axios.delete(\"http://localhost:3000/pi/postRoute/post/\" + postId, config);\n      dispatch({\n        type: DELETE_POST,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const createPost = post => {\n  return async dispatch => {\n    try {\n      return await axios.post(\"http://localhost:3000/pi/postRoute/post\", post).then(res => dispatch({\n        type: POST_SAVED,\n        payload: res.data\n      }));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\nexport const updatePost = (postId, post) => {\n  return async dispatch => {\n    try {\n      const res = await axios.put(\"http://localhost:3000/pi/postRoute/post/\" + postId, post);\n      dispatch({\n        type: POST_UPDATED,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const resetSaved = () => ({\n  type: RESET_SAVED\n});","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/redux/actions/postAction.js"],"names":["axios","GET_POSTS","DELETE_POST","POST_SAVED","RESET_SAVED","POST_UPDATED","config","headers","Authorization","localStorage","getItem","getPosts","dispatch","get","then","res","type","payload","data","catch","err","console","log","deletePost","postId","delete","error","createPost","post","e","updatePost","put","resetSaved"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,UAAjC,EAA6CC,WAA7C,EAA0DC,YAA1D,QAA8E,SAA9E;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE;AACL,oBAAe,iBADV;AAELC,IAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkC;AAFtD;AADI,CAAf;AAMA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,SAAO,MAAOC,QAAP,IAAoB;AACzB,WAAO,MAAMZ,KAAK,CACfa,GADU,CACN,yCADM,EAEVC,IAFU,CAEJC,GAAD,IAAS;AACbH,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEf,SAAR;AAAmBgB,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAAhC,OAAD,CAAR;AACD,KAJU,EAKVC,KALU,CAKHC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CALL,CAAb;AAMD,GAPD;AAQD,CATM;AAYP,OAAO,MAAMG,UAAU,GAAIC,MAAD,IAAY;AACpC,SAAO,MAAOZ,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMG,GAAG,GAAG,MAAMf,KAAK,CAACyB,MAAN,CAAa,6CAA6CD,MAA1D,EAAiElB,MAAjE,CAAlB;AAEAM,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEd,WAAR;AAAqBe,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAAlC,OAAD,CAAR;AACD,KAJD,CAIE,OAAOQ,KAAP,EAAc;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD;AACF,GARD;AASD,CAVM;AAYP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAO,MAAOhB,QAAP,IAAoB;AACzB,QAAI;AACF,aAAO,MAAMZ,KAAK,CACf4B,IADU,CACL,yCADK,EACsCA,IADtC,EAEVd,IAFU,CAEJC,GAAD,IAASH,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEb,UAAR;AAAoBc,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAAjC,OAAD,CAFZ,CAAb;AAGD,KAJD,CAIE,OAAOW,CAAP,EAAU;AACVR,MAAAA,OAAO,CAACC,GAAR,CAAYO,CAAZ;AACD;AACF,GARD;AASD,CAVM;AAYP,OAAO,MAAMC,UAAU,GAAG,CAACN,MAAD,EAASI,IAAT,KAAkB;AAC1C,SAAO,MAAOhB,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMG,GAAG,GAAG,MAAMf,KAAK,CAAC+B,GAAN,CAAU,6CAA6CP,MAAvD,EAA+DI,IAA/D,CAAlB;AAEAhB,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEX,YAAR;AAAsBY,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAAnC,OAAD,CAAR;AACD,KAJD,CAIE,OAAOQ,KAAP,EAAc;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD;AACF,GARD;AASD,CAVM;AAYP,OAAO,MAAMM,UAAU,GAAG,OAAO;AAAEhB,EAAAA,IAAI,EAAEZ;AAAR,CAAP,CAAnB","sourcesContent":["import axios from \"axios\";\r\nimport { GET_POSTS, DELETE_POST, POST_SAVED, RESET_SAVED, POST_UPDATED } from \"./types\";\r\nconst config = {\r\n  headers: {\r\n      \"Content-Type\":\"appliation/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n  }\r\n}\r\nexport const getPosts = () => {\r\n  return async (dispatch) => {\r\n    return await axios\r\n      .get(\"http://localhost:3000/pi/postRoute/post\")\r\n      .then((res) => {\r\n        dispatch({ type: GET_POSTS, payload: res.data });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n};\r\n\r\n\r\nexport const deletePost = (postId) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await axios.delete(\"http://localhost:3000/pi/postRoute/post/\" + postId,config);\r\n\r\n      dispatch({ type: DELETE_POST, payload: res.data });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const createPost = (post) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      return await axios\r\n        .post(\"http://localhost:3000/pi/postRoute/post\", post)\r\n        .then((res) => dispatch({ type: POST_SAVED, payload: res.data }));\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n};\r\n\r\nexport const updatePost = (postId, post) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const res = await axios.put(\"http://localhost:3000/pi/postRoute/post/\" + postId, post);\r\n\r\n      dispatch({ type: POST_UPDATED, payload: res.data });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const resetSaved = () => ({ type: RESET_SAVED });\r\n"]},"metadata":{},"sourceType":"module"}