{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport api from \"./api\";\n/**\r\n * @param {String} endpoint relative endpoint\r\n * @param {object} body request body\r\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default GET\r\n * @param {boolean} transformBody whether to transform the request body from JSON to FormData | Default false\r\n */\n\nexport function queryApi(_x) {\n  return _queryApi.apply(this, arguments);\n}\n\nfunction _queryApi() {\n  _queryApi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(endpoint) {\n    var body,\n        method,\n        transformBody,\n        error,\n        result,\n        config,\n        res,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            body = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n            method = _args.length > 2 && _args[2] !== undefined ? _args[2] : \"GET\";\n            transformBody = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;\n            error = null;\n            result = null;\n            _context.prev = 5;\n            //Create our config, with the method as the method passed and the new endpoint\n            config = {\n              method: method,\n              url: \"\".concat(process.env.REACT_APP_API_URL, \"/\").concat(endpoint)\n            };\n\n            if (body) {\n              // If we have a body and the method is GET, the config is the following\n              if (method.toUpperCase() === \"GET\") config = _objectSpread(_objectSpread({}, config), {}, {\n                headers: {\n                  \"Content-Type\": \"appliation/json\",\n                  Authorization: \"Bearer \".concat(localStorage.getItem(\"authToken\"))\n                },\n                data: body\n              });\n\n              if ([\"POST\", \"PUT\", \"OPTIONS\", \"PATCH\"].includes(method.toUpperCase())) {\n                if (transformBody) {\n                  (function () {\n                    // If our method is POST, PUT or PATCH, and we have to transform our body to Form Data (for files upload for example)\n                    // transform body object to form data entries\n                    var bodyFormData = new FormData();\n\n                    var _loop = function _loop() {\n                      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                          key = _Object$entries$_i[0],\n                          value = _Object$entries$_i[1];\n\n                      if (value) {\n                        if (Array.isArray(value)) value.forEach(function (v) {\n                          return bodyFormData.append(key, v);\n                        });else bodyFormData.append(key, value);\n                      }\n                    };\n\n                    for (var _i = 0, _Object$entries = Object.entries(body); _i < _Object$entries.length; _i++) {\n                      _loop();\n                    } // Change the config to the following\n\n\n                    config = _objectSpread(_objectSpread({}, config), {}, {\n                      headers: {\n                        Authorization: \"Bearer \".concat(localStorage.getItem(\"authToken\")),\n                        \"Content-Type\": \"multipart/form-data\"\n                      },\n                      data: bodyFormData\n                    });\n                  })();\n                } else {\n                  // If not keep the content type json and the body will be parsed automatically to json\n                  config = _objectSpread(_objectSpread({}, config), {}, {\n                    headers: {\n                      Authorization: \"Bearer \".concat(localStorage.getItem(\"authToken\")),\n                      \"Content-Type\": \"application/json\"\n                    },\n                    data: body\n                  });\n                }\n              }\n            } else {\n              if (method.toUpperCase() === \"GET\") config = _objectSpread(_objectSpread({}, config), {}, {\n                headers: {\n                  \"Content-Type\": \"appliation/json\",\n                  Authorization: \"Bearer \".concat(localStorage.getItem(\"authToken\"))\n                }\n              });\n            } // Setting authorization token if available with each request\n            // This example uses localStorage, feel free to change it to cookie storage or something else.\n            // const token = localStorage.getItem(\"token\");\n            // if (token)\n            //   config.headers = { ...config.headers, Authorization: `Bearer ${token}` };\n            // console.log(`Requesting : ${config.url}`)\n            // console.log(config)\n\n\n            _context.next = 10;\n            return api(config);\n\n          case 10:\n            res = _context.sent;\n            result = res.data;\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](5);\n\n            // To differentiate between validation errors and response errors,\n            // check whether the \"errors\" key is defined or not in the returned error from this function.\n            if (_context.t0.response) {\n              // The request was made and the server responded with a status code that falls out of the range of 2xx\n              error = _context.t0.response.data; //   console.log(e.message);\n              //   console.log(error);\n            } else {\n              // 1) The request was made but no response was received\n              // OR\n              // 2) Something went wrong in setting up the request that triggered an Error\n              //   console.log(e.request);\n              //   console.log(e.message);\n              error = _context.t0.message;\n            }\n\n          case 17:\n            return _context.abrupt(\"return\", [result, error]);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 14]]);\n  }));\n  return _queryApi.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/src/utils/queryApi.js"],"names":["api","queryApi","endpoint","body","method","transformBody","error","result","config","url","process","env","REACT_APP_API_URL","toUpperCase","headers","Authorization","localStorage","getItem","data","includes","bodyFormData","FormData","key","value","Array","isArray","forEach","v","append","Object","entries","res","response","message"],"mappings":"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","sourcesContent":["import api from \"./api\";\r\n\r\n/**\r\n * @param {String} endpoint relative endpoint\r\n * @param {object} body request body\r\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default GET\r\n * @param {boolean} transformBody whether to transform the request body from JSON to FormData | Default false\r\n */\r\nexport async function queryApi(endpoint,body = null,method = \"GET\",transformBody = false) {\r\n  let error = null;\r\n  let result = null;\r\n  try {\r\n    //Create our config, with the method as the method passed and the new endpoint\r\n    let config = {\r\n      method,\r\n      url: `${process.env.REACT_APP_API_URL}/${endpoint}`,\r\n    };\r\n    if (body) {\r\n      // If we have a body and the method is GET, the config is the following\r\n      if (method.toUpperCase() === \"GET\")\r\n        config = {\r\n          ...config,\r\n\r\n          headers: {  \"Content-Type\":\"appliation/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`},\r\n          data: body,\r\n        };\r\n\r\n      if ([\"POST\", \"PUT\",\"OPTIONS\", \"PATCH\"].includes(method.toUpperCase())) {\r\n        if (transformBody) {\r\n          // If our method is POST, PUT or PATCH, and we have to transform our body to Form Data (for files upload for example)\r\n          // transform body object to form data entries\r\n          let bodyFormData = new FormData();\r\n          for (let [key, value] of Object.entries(body)) {\r\n            if (value) {\r\n              if (Array.isArray(value))\r\n                value.forEach((v) => bodyFormData.append(key, v));\r\n              else bodyFormData.append(key, value);\r\n            }\r\n          }\r\n          // Change the config to the following\r\n          config = {\r\n            ...config,\r\n            headers: { Authorization: `Bearer ${localStorage.getItem(\"authToken\")}` , \"Content-Type\": \"multipart/form-data\" },\r\n          \r\n            data: bodyFormData,\r\n          };\r\n        } else {\r\n          // If not keep the content type json and the body will be parsed automatically to json\r\n          config = {\r\n            ...config,\r\n            headers: {Authorization: `Bearer ${localStorage.getItem(\"authToken\")}` ,  \"Content-Type\": \"application/json\" },\r\n            data: body,\r\n          };\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    else\r\n    { if (method.toUpperCase() === \"GET\")\r\n    config = {\r\n      ...config,\r\n\r\n      headers: {  \"Content-Type\":\"appliation/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`}\r\n     \r\n    };\r\n\r\n    }\r\n\r\n    // Setting authorization token if available with each request\r\n    // This example uses localStorage, feel free to change it to cookie storage or something else.\r\n\r\n    // const token = localStorage.getItem(\"token\");\r\n    // if (token)\r\n    //   config.headers = { ...config.headers, Authorization: `Bearer ${token}` };\r\n\r\n    // console.log(`Requesting : ${config.url}`)\r\n    // console.log(config)\r\n\r\n    const res = await api(config);\r\n    result = res.data;\r\n  } catch (e) {\r\n    // To differentiate between validation errors and response errors,\r\n    // check whether the \"errors\" key is defined or not in the returned error from this function.\r\n\r\n    if (e.response) {\r\n      // The request was made and the server responded with a status code that falls out of the range of 2xx\r\n      error = e.response.data;\r\n      //   console.log(e.message);\r\n      //   console.log(error);\r\n    } else {\r\n      // 1) The request was made but no response was received\r\n      // OR\r\n      // 2) Something went wrong in setting up the request that triggered an Error\r\n\r\n      //   console.log(e.request);\r\n      //   console.log(e.message);\r\n      error = e.message;\r\n    }\r\n  }\r\n  return [result, error];\r\n}"]},"metadata":{},"sourceType":"module"}