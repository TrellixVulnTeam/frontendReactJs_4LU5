{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { nonMaxSuppression, Point } from 'tfjs-image-recognition-base';\nimport { extractImagePatches } from './extractImagePatches';\nimport { MtcnnBox } from './MtcnnBox';\nimport { ONet } from './ONet';\nexport function stage3(img, inputBoxes, scoreThreshold, params, stats) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var ts, onetInputs, onetOuts, scoresTensor, scores, _a, _b, indices, filteredRegions, filteredBoxes, filteredScores, finalBoxes, finalScores, points, indicesNms;\n\n    return tslib_1.__generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          ts = Date.now();\n          return [4\n          /*yield*/\n          , extractImagePatches(img, inputBoxes, {\n            width: 48,\n            height: 48\n          })];\n\n        case 1:\n          onetInputs = _c.sent();\n          stats.stage3_extractImagePatches = Date.now() - ts;\n          ts = Date.now();\n          onetOuts = onetInputs.map(function (onetInput) {\n            var out = ONet(onetInput, params);\n            onetInput.dispose();\n            return out;\n          });\n          stats.stage3_onet = Date.now() - ts;\n          scoresTensor = onetOuts.length > 1 ? tf.concat(onetOuts.map(function (out) {\n            return out.scores;\n          })) : onetOuts[0].scores;\n          _b = (_a = Array).from;\n          return [4\n          /*yield*/\n          , scoresTensor.data()];\n\n        case 2:\n          scores = _b.apply(_a, [_c.sent()]);\n          scoresTensor.dispose();\n          indices = scores.map(function (score, idx) {\n            return {\n              score: score,\n              idx: idx\n            };\n          }).filter(function (c) {\n            return c.score > scoreThreshold;\n          }).map(function (_a) {\n            var idx = _a.idx;\n            return idx;\n          });\n          filteredRegions = indices.map(function (idx) {\n            return new MtcnnBox(onetOuts[idx].regions.get(0, 0), onetOuts[idx].regions.get(0, 1), onetOuts[idx].regions.get(0, 2), onetOuts[idx].regions.get(0, 3));\n          });\n          filteredBoxes = indices.map(function (idx, i) {\n            return inputBoxes[idx].calibrate(filteredRegions[i]);\n          });\n          filteredScores = indices.map(function (idx) {\n            return scores[idx];\n          });\n          finalBoxes = [];\n          finalScores = [];\n          points = [];\n\n          if (filteredBoxes.length > 0) {\n            ts = Date.now();\n            indicesNms = nonMaxSuppression(filteredBoxes, filteredScores, 0.7, false);\n            stats.stage3_nms = Date.now() - ts;\n            finalBoxes = indicesNms.map(function (idx) {\n              return filteredBoxes[idx];\n            });\n            finalScores = indicesNms.map(function (idx) {\n              return filteredScores[idx];\n            });\n            points = indicesNms.map(function (idx, i) {\n              return Array(5).fill(0).map(function (_, ptIdx) {\n                return new Point(onetOuts[idx].points.get(0, ptIdx) * (finalBoxes[i].width + 1) + finalBoxes[i].left, onetOuts[idx].points.get(0, ptIdx + 5) * (finalBoxes[i].height + 1) + finalBoxes[i].top);\n              });\n            });\n          }\n\n          onetOuts.forEach(function (t) {\n            t.regions.dispose();\n            t.scores.dispose();\n            t.points.dispose();\n          });\n          return [2\n          /*return*/\n          , {\n            boxes: finalBoxes,\n            scores: finalScores,\n            points: points\n          }];\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/mtcnn/stage3.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport { nonMaxSuppression, Point } from 'tfjs-image-recognition-base';\r\nimport { extractImagePatches } from './extractImagePatches';\r\nimport { MtcnnBox } from './MtcnnBox';\r\nimport { ONet } from './ONet';\r\nexport function stage3(img, inputBoxes, scoreThreshold, params, stats) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var ts, onetInputs, onetOuts, scoresTensor, scores, _a, _b, indices, filteredRegions, filteredBoxes, filteredScores, finalBoxes, finalScores, points, indicesNms;\r\n        return tslib_1.__generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    ts = Date.now();\r\n                    return [4 /*yield*/, extractImagePatches(img, inputBoxes, { width: 48, height: 48 })];\r\n                case 1:\r\n                    onetInputs = _c.sent();\r\n                    stats.stage3_extractImagePatches = Date.now() - ts;\r\n                    ts = Date.now();\r\n                    onetOuts = onetInputs.map(function (onetInput) {\r\n                        var out = ONet(onetInput, params);\r\n                        onetInput.dispose();\r\n                        return out;\r\n                    });\r\n                    stats.stage3_onet = Date.now() - ts;\r\n                    scoresTensor = onetOuts.length > 1\r\n                        ? tf.concat(onetOuts.map(function (out) { return out.scores; }))\r\n                        : onetOuts[0].scores;\r\n                    _b = (_a = Array).from;\r\n                    return [4 /*yield*/, scoresTensor.data()];\r\n                case 2:\r\n                    scores = _b.apply(_a, [_c.sent()]);\r\n                    scoresTensor.dispose();\r\n                    indices = scores\r\n                        .map(function (score, idx) { return ({ score: score, idx: idx }); })\r\n                        .filter(function (c) { return c.score > scoreThreshold; })\r\n                        .map(function (_a) {\r\n                        var idx = _a.idx;\r\n                        return idx;\r\n                    });\r\n                    filteredRegions = indices.map(function (idx) { return new MtcnnBox(onetOuts[idx].regions.get(0, 0), onetOuts[idx].regions.get(0, 1), onetOuts[idx].regions.get(0, 2), onetOuts[idx].regions.get(0, 3)); });\r\n                    filteredBoxes = indices\r\n                        .map(function (idx, i) { return inputBoxes[idx].calibrate(filteredRegions[i]); });\r\n                    filteredScores = indices.map(function (idx) { return scores[idx]; });\r\n                    finalBoxes = [];\r\n                    finalScores = [];\r\n                    points = [];\r\n                    if (filteredBoxes.length > 0) {\r\n                        ts = Date.now();\r\n                        indicesNms = nonMaxSuppression(filteredBoxes, filteredScores, 0.7, false);\r\n                        stats.stage3_nms = Date.now() - ts;\r\n                        finalBoxes = indicesNms.map(function (idx) { return filteredBoxes[idx]; });\r\n                        finalScores = indicesNms.map(function (idx) { return filteredScores[idx]; });\r\n                        points = indicesNms.map(function (idx, i) {\r\n                            return Array(5).fill(0).map(function (_, ptIdx) {\r\n                                return new Point(((onetOuts[idx].points.get(0, ptIdx) * (finalBoxes[i].width + 1)) + finalBoxes[i].left), ((onetOuts[idx].points.get(0, ptIdx + 5) * (finalBoxes[i].height + 1)) + finalBoxes[i].top));\r\n                            });\r\n                        });\r\n                    }\r\n                    onetOuts.forEach(function (t) {\r\n                        t.regions.dispose();\r\n                        t.scores.dispose();\r\n                        t.points.dispose();\r\n                    });\r\n                    return [2 /*return*/, {\r\n                            boxes: finalBoxes,\r\n                            scores: finalScores,\r\n                            points: points\r\n                        }];\r\n            }\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=stage3.js.map"]},"metadata":{},"sourceType":"module"}