{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _immutabilityHelper = _interopRequireDefault(require(\"immutability-helper\"));\n\nvar LaneHelper = {\n  initialiseLanes: function initialiseLanes(state, _ref) {\n    var lanes = _ref.lanes;\n    var newLanes = lanes.map(function (lane) {\n      lane.currentPage = 1;\n      lane.cards && lane.cards.forEach(function (c) {\n        return c.laneId = lane.id;\n      });\n      return lane;\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: newLanes\n      }\n    });\n  },\n  paginateLane: function paginateLane(state, _ref2) {\n    var laneId = _ref2.laneId,\n        newCards = _ref2.newCards,\n        nextPage = _ref2.nextPage;\n    var updatedLanes = LaneHelper.appendCardsToLane(state, {\n      laneId: laneId,\n      newCards: newCards\n    });\n    updatedLanes.find(function (lane) {\n      return lane.id === laneId;\n    }).currentPage = nextPage;\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: updatedLanes\n      }\n    });\n  },\n  appendCardsToLane: function appendCardsToLane(state, _ref3) {\n    var laneId = _ref3.laneId,\n        newCards = _ref3.newCards,\n        index = _ref3.index;\n    var lane = state.lanes.find(function (lane) {\n      return lane.id === laneId;\n    });\n    newCards = newCards.map(function (c) {\n      return (0, _immutabilityHelper.default)(c, {\n        laneId: {\n          $set: laneId\n        }\n      });\n    }).filter(function (c) {\n      return lane.cards.find(function (card) {\n        return card.id === c.id;\n      }) == null;\n    });\n    return state.lanes.map(function (lane) {\n      if (lane.id === laneId) {\n        if (index !== undefined) {\n          return (0, _immutabilityHelper.default)(lane, {\n            cards: {\n              $splice: [[index, 0].concat(_toConsumableArray(newCards))]\n            }\n          });\n        } else {\n          var cardsToUpdate = [].concat(_toConsumableArray(lane.cards), _toConsumableArray(newCards));\n          return (0, _immutabilityHelper.default)(lane, {\n            cards: {\n              $set: cardsToUpdate\n            }\n          });\n        }\n      } else {\n        return lane;\n      }\n    });\n  },\n  appendCardToLane: function appendCardToLane(state, _ref4) {\n    var laneId = _ref4.laneId,\n        card = _ref4.card,\n        index = _ref4.index;\n    var newLanes = LaneHelper.appendCardsToLane(state, {\n      laneId: laneId,\n      newCards: [card],\n      index: index\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: newLanes\n      }\n    });\n  },\n  addLane: function addLane(state, lane) {\n    var newLane = (0, _objectSpread2.default)({\n      cards: []\n    }, lane);\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $push: [newLane]\n      }\n    });\n  },\n  updateLane: function updateLane(state, updatedLane) {\n    var newLanes = state.lanes.map(function (lane) {\n      if (updatedLane.id == lane.id) {\n        return (0, _objectSpread2.default)({}, lane, updatedLane);\n      } else {\n        return lane;\n      }\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: newLanes\n      }\n    });\n  },\n  removeCardFromLane: function removeCardFromLane(state, _ref5) {\n    var laneId = _ref5.laneId,\n        cardId = _ref5.cardId;\n    var lanes = state.lanes.map(function (lane) {\n      if (lane.id === laneId) {\n        var newCards = lane.cards.filter(function (card) {\n          return card.id !== cardId;\n        });\n        return (0, _immutabilityHelper.default)(lane, {\n          cards: {\n            $set: newCards\n          }\n        });\n      } else {\n        return lane;\n      }\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: lanes\n      }\n    });\n  },\n  updateCardFromLane: function updateCardFromLane(state, _ref6) {\n    var laneId = _ref6.laneId,\n        card = _ref6.card;\n    var laneIndex = state.lanes.findIndex(function (x) {\n      return x.id === laneId;\n    });\n\n    if (laneIndex < 0) {\n      return state;\n    }\n\n    var cardIndex = state.lanes[laneIndex].cards.findIndex(function (x) {\n      return x.id === card.id;\n    });\n\n    if (cardIndex < 0) {\n      return state;\n    }\n\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: _defineProperty({}, laneIndex, {\n        cards: _defineProperty({}, cardIndex, {\n          $set: card\n        })\n      })\n    });\n  },\n  moveCardAcrossLanes: function moveCardAcrossLanes(state, _ref7) {\n    var fromLaneId = _ref7.fromLaneId,\n        toLaneId = _ref7.toLaneId,\n        cardId = _ref7.cardId,\n        index = _ref7.index;\n    var cardToMove = null;\n    var interimLanes = state.lanes.map(function (lane) {\n      if (lane.id === fromLaneId) {\n        cardToMove = lane.cards.find(function (card) {\n          return card.id === cardId;\n        });\n        var newCards = lane.cards.filter(function (card) {\n          return card.id !== cardId;\n        });\n        return (0, _immutabilityHelper.default)(lane, {\n          cards: {\n            $set: newCards\n          }\n        });\n      } else {\n        return lane;\n      }\n    });\n    var updatedState = (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: interimLanes\n      }\n    });\n    return LaneHelper.appendCardToLane(updatedState, {\n      laneId: toLaneId,\n      card: cardToMove,\n      index: index\n    });\n  },\n  updateCardsForLane: function updateCardsForLane(state, _ref8) {\n    var laneId = _ref8.laneId,\n        cards = _ref8.cards;\n    var lanes = state.lanes.map(function (lane) {\n      if (lane.id === laneId) {\n        return (0, _immutabilityHelper.default)(lane, {\n          cards: {\n            $set: cards\n          }\n        });\n      } else {\n        return lane;\n      }\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: lanes\n      }\n    });\n  },\n  updateCardForLane: function updateCardForLane(state, _ref9) {\n    var laneId = _ref9.laneId,\n        updatedCard = _ref9.updatedCard;\n    var lanes = state.lanes.map(function (lane) {\n      if (lane.id === laneId) {\n        var cards = lane.cards.map(function (card) {\n          if (card.id === updatedCard.id) {\n            return (0, _objectSpread2.default)({}, card, updatedCard);\n          } else {\n            return card;\n          }\n        });\n        return (0, _immutabilityHelper.default)(lane, {\n          cards: {\n            $set: cards\n          }\n        });\n      } else {\n        return lane;\n      }\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: lanes\n      }\n    });\n  },\n  updateLanes: function updateLanes(state, lanes) {\n    return (0, _objectSpread2.default)({}, state, {\n      lanes: lanes\n    });\n  },\n  moveLane: function moveLane(state, _ref10) {\n    var oldIndex = _ref10.oldIndex,\n        newIndex = _ref10.newIndex;\n    var laneToMove = state.lanes[oldIndex];\n    var tempState = (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $splice: [[oldIndex, 1]]\n      }\n    });\n    return (0, _immutabilityHelper.default)(tempState, {\n      lanes: {\n        $splice: [[newIndex, 0, laneToMove]]\n      }\n    });\n  },\n  removeLane: function removeLane(state, _ref11) {\n    var laneId = _ref11.laneId;\n    var updatedLanes = state.lanes.filter(function (lane) {\n      return lane.id !== laneId;\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: updatedLanes\n      }\n    });\n  }\n};\nvar _default = LaneHelper;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/react-trello/dist/helpers/LaneHelper.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_objectSpread2","_immutabilityHelper","LaneHelper","initialiseLanes","state","lanes","newLanes","map","lane","currentPage","cards","forEach","c","laneId","id","$set","paginateLane","newCards","nextPage","updatedLanes","appendCardsToLane","find","index","filter","card","undefined","$splice","cardsToUpdate","appendCardToLane","addLane","newLane","$push","updateLane","updatedLane","removeCardFromLane","cardId","updateCardFromLane","laneIndex","findIndex","x","cardIndex","moveCardAcrossLanes","fromLaneId","toLaneId","cardToMove","interimLanes","updatedState","updateCardsForLane","updateCardForLane","updatedCard","updateLanes","moveLane","oldIndex","newIndex","laneToMove","tempState","removeLane","_default"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = void 0;\r\n\r\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\r\n\r\nvar _immutabilityHelper = _interopRequireDefault(require(\"immutability-helper\"));\r\n\r\nconst LaneHelper = {\r\n  initialiseLanes: (state, {\r\n    lanes\r\n  }) => {\r\n    const newLanes = lanes.map(lane => {\r\n      lane.currentPage = 1;\r\n      lane.cards && lane.cards.forEach(c => c.laneId = lane.id);\r\n      return lane;\r\n    });\r\n    return (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $set: newLanes\r\n      }\r\n    });\r\n  },\r\n  paginateLane: (state, {\r\n    laneId,\r\n    newCards,\r\n    nextPage\r\n  }) => {\r\n    const updatedLanes = LaneHelper.appendCardsToLane(state, {\r\n      laneId: laneId,\r\n      newCards: newCards\r\n    });\r\n    updatedLanes.find(lane => lane.id === laneId).currentPage = nextPage;\r\n    return (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $set: updatedLanes\r\n      }\r\n    });\r\n  },\r\n  appendCardsToLane: (state, {\r\n    laneId,\r\n    newCards,\r\n    index\r\n  }) => {\r\n    const lane = state.lanes.find(lane => lane.id === laneId);\r\n    newCards = newCards.map(c => (0, _immutabilityHelper.default)(c, {\r\n      laneId: {\r\n        $set: laneId\r\n      }\r\n    })).filter(c => lane.cards.find(card => card.id === c.id) == null);\r\n    return state.lanes.map(lane => {\r\n      if (lane.id === laneId) {\r\n        if (index !== undefined) {\r\n          return (0, _immutabilityHelper.default)(lane, {\r\n            cards: {\r\n              $splice: [[index, 0, ...newCards]]\r\n            }\r\n          });\r\n        } else {\r\n          const cardsToUpdate = [...lane.cards, ...newCards];\r\n          return (0, _immutabilityHelper.default)(lane, {\r\n            cards: {\r\n              $set: cardsToUpdate\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        return lane;\r\n      }\r\n    });\r\n  },\r\n  appendCardToLane: (state, {\r\n    laneId,\r\n    card,\r\n    index\r\n  }) => {\r\n    const newLanes = LaneHelper.appendCardsToLane(state, {\r\n      laneId: laneId,\r\n      newCards: [card],\r\n      index\r\n    });\r\n    return (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $set: newLanes\r\n      }\r\n    });\r\n  },\r\n  addLane: (state, lane) => {\r\n    const newLane = (0, _objectSpread2.default)({\r\n      cards: []\r\n    }, lane);\r\n    return (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $push: [newLane]\r\n      }\r\n    });\r\n  },\r\n  updateLane: (state, updatedLane) => {\r\n    const newLanes = state.lanes.map(lane => {\r\n      if (updatedLane.id == lane.id) {\r\n        return (0, _objectSpread2.default)({}, lane, updatedLane);\r\n      } else {\r\n        return lane;\r\n      }\r\n    });\r\n    return (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $set: newLanes\r\n      }\r\n    });\r\n  },\r\n  removeCardFromLane: (state, {\r\n    laneId,\r\n    cardId\r\n  }) => {\r\n    const lanes = state.lanes.map(lane => {\r\n      if (lane.id === laneId) {\r\n        let newCards = lane.cards.filter(card => card.id !== cardId);\r\n        return (0, _immutabilityHelper.default)(lane, {\r\n          cards: {\r\n            $set: newCards\r\n          }\r\n        });\r\n      } else {\r\n        return lane;\r\n      }\r\n    });\r\n    return (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $set: lanes\r\n      }\r\n    });\r\n  },\r\n  updateCardFromLane: (state, {\r\n    laneId,\r\n    card\r\n  }) => {\r\n    const laneIndex = state.lanes.findIndex(x => x.id === laneId);\r\n\r\n    if (laneIndex < 0) {\r\n      return state;\r\n    }\r\n\r\n    const cardIndex = state.lanes[laneIndex].cards.findIndex(x => x.id === card.id);\r\n\r\n    if (cardIndex < 0) {\r\n      return state;\r\n    }\r\n\r\n    return (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        [laneIndex]: {\r\n          cards: {\r\n            [cardIndex]: {\r\n              $set: card\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  },\r\n  moveCardAcrossLanes: (state, {\r\n    fromLaneId,\r\n    toLaneId,\r\n    cardId,\r\n    index\r\n  }) => {\r\n    let cardToMove = null;\r\n    const interimLanes = state.lanes.map(lane => {\r\n      if (lane.id === fromLaneId) {\r\n        cardToMove = lane.cards.find(card => card.id === cardId);\r\n        const newCards = lane.cards.filter(card => card.id !== cardId);\r\n        return (0, _immutabilityHelper.default)(lane, {\r\n          cards: {\r\n            $set: newCards\r\n          }\r\n        });\r\n      } else {\r\n        return lane;\r\n      }\r\n    });\r\n    const updatedState = (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $set: interimLanes\r\n      }\r\n    });\r\n    return LaneHelper.appendCardToLane(updatedState, {\r\n      laneId: toLaneId,\r\n      card: cardToMove,\r\n      index: index\r\n    });\r\n  },\r\n  updateCardsForLane: (state, {\r\n    laneId,\r\n    cards\r\n  }) => {\r\n    const lanes = state.lanes.map(lane => {\r\n      if (lane.id === laneId) {\r\n        return (0, _immutabilityHelper.default)(lane, {\r\n          cards: {\r\n            $set: cards\r\n          }\r\n        });\r\n      } else {\r\n        return lane;\r\n      }\r\n    });\r\n    return (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $set: lanes\r\n      }\r\n    });\r\n  },\r\n  updateCardForLane: (state, {\r\n    laneId,\r\n    updatedCard\r\n  }) => {\r\n    const lanes = state.lanes.map(lane => {\r\n      if (lane.id === laneId) {\r\n        const cards = lane.cards.map(card => {\r\n          if (card.id === updatedCard.id) {\r\n            return (0, _objectSpread2.default)({}, card, updatedCard);\r\n          } else {\r\n            return card;\r\n          }\r\n        });\r\n        return (0, _immutabilityHelper.default)(lane, {\r\n          cards: {\r\n            $set: cards\r\n          }\r\n        });\r\n      } else {\r\n        return lane;\r\n      }\r\n    });\r\n    return (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $set: lanes\r\n      }\r\n    });\r\n  },\r\n  updateLanes: (state, lanes) => {\r\n    return (0, _objectSpread2.default)({}, state, {\r\n      lanes: lanes\r\n    });\r\n  },\r\n  moveLane: (state, {\r\n    oldIndex,\r\n    newIndex\r\n  }) => {\r\n    const laneToMove = state.lanes[oldIndex];\r\n    const tempState = (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $splice: [[oldIndex, 1]]\r\n      }\r\n    });\r\n    return (0, _immutabilityHelper.default)(tempState, {\r\n      lanes: {\r\n        $splice: [[newIndex, 0, laneToMove]]\r\n      }\r\n    });\r\n  },\r\n  removeLane: (state, {\r\n    laneId\r\n  }) => {\r\n    const updatedLanes = state.lanes.filter(lane => lane.id !== laneId);\r\n    return (0, _immutabilityHelper.default)(state, {\r\n      lanes: {\r\n        $set: updatedLanes\r\n      }\r\n    });\r\n  }\r\n};\r\nvar _default = LaneHelper;\r\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}