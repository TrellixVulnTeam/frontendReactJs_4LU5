{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nvar initialState = {\n  experiences: [],\n  selectedExperience: {},\n  errors: \"\"\n};\nvar experiencesSlice = createSlice({\n  name: \"experiences\",\n  initialState: initialState,\n  reducers: {\n    populateExperiences: function populateExperiences(state, action) {\n      state.experiences = action.payload;\n    },\n    selectExperience: function selectExperience(state, action) {\n      state.populateExperiences = action.payload;\n    },\n    addExperience: function addExperience(state, action) {\n      var payload = action.payload;\n      state.experiences.push(payload);\n    },\n    deleteExperience: function deleteExperience(state, action) {\n      var payload = action.payload;\n      var index = state.experiences.findIndex(function (experience) {\n        return experience._id === payload;\n      });\n\n      if (index !== -1) {\n        state.experiences.splice(index, 1);\n      }\n    },\n    updateExperience: function updateExperience(state, action) {\n      var payload = action.payload;\n      state.experiences.set(payload);\n    },\n    setErrors: function setErrors(state, action) {\n      state.errors = action.payload;\n    }\n  }\n});\nexport var fetchExperiences = function fetchExperiences() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var config;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              config = {\n                headers: {\n                  \"Content-Type\": \"appliation/json\",\n                  Authorization: \"Bearer \".concat(localStorage.getItem(\"authToken\"))\n                }\n              };\n              axios.get(\"https://aaweni.herokuapp.com/experience/getAll\", config).then(function (response) {\n                dispatch(populateExperiences(response.data));\n                console.log(response.data);\n              }).catch(function (error) {\n                console.log(error);\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var selectExperiences = function selectExperiences(state) {\n  return [state.experiences.experiences, state.experiences.errors];\n};\nvar _experiencesSlice$act = experiencesSlice.actions,\n    populateExperiences = _experiencesSlice$act.populateExperiences,\n    addExperience = _experiencesSlice$act.addExperience,\n    setErrors = _experiencesSlice$act.setErrors,\n    deleteExperience = _experiencesSlice$act.deleteExperience,\n    selectExperience = _experiencesSlice$act.selectExperience,\n    updateExperience = _experiencesSlice$act.updateExperience;\nexport { populateExperiences, addExperience, setErrors, deleteExperience, selectExperience, updateExperience };\nexport default experiencesSlice.reducer;","map":{"version":3,"sources":["C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/src/redux/slices/experienceSlice.js"],"names":["createSlice","axios","initialState","experiences","selectedExperience","errors","experiencesSlice","name","reducers","populateExperiences","state","action","payload","selectExperience","addExperience","push","deleteExperience","index","findIndex","experience","_id","splice","updateExperience","set","setErrors","fetchExperiences","dispatch","config","headers","Authorization","localStorage","getItem","get","then","response","data","console","log","catch","error","selectExperiences","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\nlet initialState = {\r\n    experiences: [],\r\n    selectedExperience: {},\r\n    errors: \"\",\r\n    };\r\nconst experiencesSlice=createSlice({\r\n    name: \"experiences\",\r\n    initialState,\r\n    reducers: {\r\n        populateExperiences(state, action) {\r\n        state.experiences = action.payload;\r\n        },\r\n        selectExperience(state, action) {\r\n            state.populateExperiences = action.payload;\r\n            },\r\n        addExperience: (state, action) => {\r\n            const payload = action.payload;\r\n            state.experiences.push(payload);\r\n            },\r\n        deleteExperience: (state, action) => {\r\n            const payload = action.payload;\r\n            const index = state.experiences.findIndex((experience) => experience._id === payload);\r\n            if (index !== -1) {\r\n                state.experiences.splice(index, 1);\r\n                               }\r\n       },\r\n       updateExperience: (state, action) => {\r\n        const payload = action.payload;\r\n        state.experiences.set(payload);\r\n                           },\r\n      \r\n    \r\n         setErrors(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n        \r\n\r\nexport const fetchExperiences=()=>async(dispatch)=>{\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"appliation/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n        }\r\n    }\r\n    axios.get(`https://aaweni.herokuapp.com/experience/getAll`, config)\r\n                .then((response) => {\r\n                 dispatch(populateExperiences(response.data));\r\n                 console.log(response.data)\r\n                })\r\n                .catch((error) => {\r\n                  console.log(error)\r\n                })\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const selectExperiences=(state)=>{\r\n    return [state.experiences.experiences,state.experiences.errors];\r\n}\r\nexport const {populateExperiences,addExperience,setErrors,deleteExperience,selectExperience,updateExperience}=experiencesSlice.actions;\r\nexport default experiencesSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}