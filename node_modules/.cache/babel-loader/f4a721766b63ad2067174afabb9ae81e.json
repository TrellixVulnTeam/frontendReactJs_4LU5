{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { queryApi } from \"../utils/queryApi\";\n/**\r\n * @param {String} endpoint relative endpoint\r\n * @param {object} body request body\r\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default GET\r\n * @param {boolean} transformBody whether to transform the request body from JSON to FormData | Default false\r\n */\n\nexport function useApi(endpoint, body = null, method = \"GET\", transformBody = false) {\n  _s();\n\n  // Create state values\n  // result, error and the body we will send\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const [bodyUsed, setBodyUsed] = useState(body); // query that will call the queryApi function, takes only a new body argument (optional)\n\n  async function query(newBody) {\n    if (newBody) setBodyUsed(newBody); // If the endpoint is empty return an empty value\n\n    if (!endpoint) return;\n    setError(false);\n    setResult(null); // Normal call to queryApi, deconstructed into result and error\n\n    const [res, err] = await queryApi(endpoint, bodyUsed, method, transformBody);\n    setResult(res);\n    setError(err);\n  } // On hook init call the query once with initial arguments\n\n\n  useEffect(() => {\n    query(); // eslint-disable-next-line\n  }, []); // Deconstruct the hook into result, error and a function that can update the hook\n\n  return [result, error, query];\n}\n\n_s(useApi, \"4fwKu2mD1ebmInWY0I7lmBNojeY=\");","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/hooks/useApi.js"],"names":["useState","useEffect","queryApi","useApi","endpoint","body","method","transformBody","result","setResult","error","setError","bodyUsed","setBodyUsed","query","newBody","res","err"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CACLC,QADK,EAELC,IAAI,GAAG,IAFF,EAGLC,MAAM,GAAG,KAHJ,EAILC,aAAa,GAAG,KAJX,EAKL;AAAA;;AACA;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAACK,IAAD,CAAxC,CALA,CAOA;;AACA,iBAAeS,KAAf,CAAqBC,OAArB,EAA8B;AAC5B,QAAIA,OAAJ,EAAaF,WAAW,CAACE,OAAD,CAAX,CADe,CAE5B;;AACA,QAAI,CAACX,QAAL,EAAe;AACfO,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,SAAS,CAAC,IAAD,CAAT,CAL4B,CAM5B;;AACA,UAAM,CAACO,GAAD,EAAMC,GAAN,IAAa,MAAMf,QAAQ,CAC/BE,QAD+B,EAE/BQ,QAF+B,EAG/BN,MAH+B,EAI/BC,aAJ+B,CAAjC;AAOAE,IAAAA,SAAS,CAACO,GAAD,CAAT;AACAL,IAAAA,QAAQ,CAACM,GAAD,CAAR;AACD,GAxBD,CA0BA;;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,KAAK,GADS,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT,CA3BA,CAgCA;;AACA,SAAO,CAACN,MAAD,EAASE,KAAT,EAAgBI,KAAhB,CAAP;AACD;;GAvCeX,M","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { queryApi } from \"../utils/queryApi\";\r\n\r\n/**\r\n * @param {String} endpoint relative endpoint\r\n * @param {object} body request body\r\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default GET\r\n * @param {boolean} transformBody whether to transform the request body from JSON to FormData | Default false\r\n */\r\nexport function useApi(\r\n  endpoint,\r\n  body = null,\r\n  method = \"GET\",\r\n  transformBody = false\r\n) {\r\n  // Create state values\r\n  // result, error and the body we will send\r\n  const [result, setResult] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [bodyUsed, setBodyUsed] = useState(body);\r\n\r\n  // query that will call the queryApi function, takes only a new body argument (optional)\r\n  async function query(newBody) {\r\n    if (newBody) setBodyUsed(newBody);\r\n    // If the endpoint is empty return an empty value\r\n    if (!endpoint) return;\r\n    setError(false);\r\n    setResult(null);\r\n    // Normal call to queryApi, deconstructed into result and error\r\n    const [res, err] = await queryApi(\r\n      endpoint,\r\n      bodyUsed,\r\n      method,\r\n      transformBody\r\n    );\r\n\r\n    setResult(res);\r\n    setError(err);\r\n  }\r\n\r\n  // On hook init call the query once with initial arguments\r\n  useEffect(() => {\r\n    query();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // Deconstruct the hook into result, error and a function that can update the hook\r\n  return [result, error, query];\r\n}"]},"metadata":{},"sourceType":"module"}