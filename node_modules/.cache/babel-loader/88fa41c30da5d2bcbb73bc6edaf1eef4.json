{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nlet initialState = {\n  notifications: [],\n  selectedNotification: {},\n  errors: \"\"\n};\nconst notificationsSlice = createSlice({\n  name: \"notifications\",\n  initialState,\n  reducers: {\n    populateNotifications(state, action) {\n      state.notifications = action.payload;\n    },\n\n    selectNotification(state, action) {\n      state.populateNotifications = action.payload;\n    },\n\n    addNotification: (state, action) => {\n      const payload = action.payload;\n      state.notifications.push(payload);\n    },\n    deleteNotification: (state, action) => {\n      const payload = action.payload;\n      const index = state.notifications.findIndex(notification => notification._id === payload);\n\n      if (index !== -1) {\n        state.notifications.splice(index, 1);\n      }\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    }\n\n  }\n});\nexport const fetchNotifications = () => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"appliation/json\",\n      Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n    }\n  };\n  axios.get(`/notif/getNotif`, config).then(response => {\n    dispatch(populateNotifications(response.data));\n    console.log(response.data);\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const selectNotifications = state => {\n  return [state.notifications.notifications, state.notifications.errors];\n};\nexport const {\n  populateNotifications,\n  addNotification,\n  setErrors,\n  deleteNotification,\n  selectNotification\n} = notificationsSlice.actions;\nexport default notificationsSlice.reducer;","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/redux/slices/notificationSlice.js"],"names":["createSlice","axios","initialState","notifications","selectedNotification","errors","notificationsSlice","name","reducers","populateNotifications","state","action","payload","selectNotification","addNotification","push","deleteNotification","index","findIndex","notification","_id","splice","setErrors","fetchNotifications","dispatch","config","headers","Authorization","localStorage","getItem","get","then","response","data","console","log","catch","error","selectNotifications","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAIC,YAAY,GAAG;AACfC,EAAAA,aAAa,EAAE,EADA;AAEfC,EAAAA,oBAAoB,EAAE,EAFP;AAGfC,EAAAA,MAAM,EAAE;AAHO,CAAnB;AAKA,MAAMC,kBAAkB,GAACN,WAAW,CAAC;AACjCO,EAAAA,IAAI,EAAE,eAD2B;AAEjCL,EAAAA,YAFiC;AAGjCM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,qBAAqB,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrCD,MAAAA,KAAK,CAACP,aAAN,GAAsBQ,MAAM,CAACC,OAA7B;AACC,KAHK;;AAINC,IAAAA,kBAAkB,CAACH,KAAD,EAAQC,MAAR,EAAgB;AAC9BD,MAAAA,KAAK,CAACD,qBAAN,GAA8BE,MAAM,CAACC,OAArC;AACC,KANC;;AAONE,IAAAA,eAAe,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACAF,MAAAA,KAAK,CAACP,aAAN,CAAoBY,IAApB,CAAyBH,OAAzB;AACC,KAVC;AAWNI,IAAAA,kBAAkB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACnC,YAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACA,YAAMK,KAAK,GAAGP,KAAK,CAACP,aAAN,CAAoBe,SAApB,CAA+BC,YAAD,IAAkBA,YAAY,CAACC,GAAb,KAAqBR,OAArE,CAAd;;AACA,UAAIK,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdP,QAAAA,KAAK,CAACP,aAAN,CAAoBkB,MAApB,CAA2BJ,KAA3B,EAAkC,CAAlC;AACgB;AACxB,KAjBM;;AAoBLK,IAAAA,SAAS,CAACZ,KAAD,EAAQC,MAAR,EAAgB;AACjBD,MAAAA,KAAK,CAACL,MAAN,GAAeM,MAAM,CAACC,OAAtB;AACN;;AAtBG;AAHuB,CAAD,CAApC;AAgCA,OAAO,MAAMW,kBAAkB,GAAC,MAAI,MAAMC,QAAN,IAAiB;AACjD,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAe,iBADV;AAELC,MAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkC;AAFtD;AADE,GAAf;AAMA5B,EAAAA,KAAK,CAAC6B,GAAN,CAAW,iBAAX,EAA6BL,MAA7B,EACaM,IADb,CACmBC,QAAD,IAAc;AACnBR,IAAAA,QAAQ,CAACf,qBAAqB,CAACuB,QAAQ,CAACC,IAAV,CAAtB,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,IAArB;AACA,GAJb,EAKaG,KALb,CAKoBC,KAAD,IAAW;AAChBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,GAPb;AAQH,CAfM;AAmBP,OAAO,MAAMC,mBAAmB,GAAE5B,KAAD,IAAS;AACtC,SAAO,CAACA,KAAK,CAACP,aAAN,CAAoBA,aAArB,EAAmCO,KAAK,CAACP,aAAN,CAAoBE,MAAvD,CAAP;AACH,CAFM;AAGP,OAAO,MAAM;AAACI,EAAAA,qBAAD;AAAuBK,EAAAA,eAAvB;AAAuCQ,EAAAA,SAAvC;AAAiDN,EAAAA,kBAAjD;AAAoEH,EAAAA;AAApE,IAAwFP,kBAAkB,CAACiC,OAAjH;AACP,eAAejC,kBAAkB,CAACkC,OAAlC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\nlet initialState = {\r\n    notifications: [],\r\n    selectedNotification: {},\r\n    errors: \"\",\r\n    };\r\nconst notificationsSlice=createSlice({\r\n    name: \"notifications\",\r\n    initialState,\r\n    reducers: {\r\n        populateNotifications(state, action) {\r\n        state.notifications = action.payload;\r\n        },\r\n        selectNotification(state, action) {\r\n            state.populateNotifications = action.payload;\r\n            },\r\n        addNotification: (state, action) => {\r\n            const payload = action.payload;\r\n            state.notifications.push(payload);\r\n            },\r\n        deleteNotification: (state, action) => {\r\n            const payload = action.payload;\r\n            const index = state.notifications.findIndex((notification) => notification._id === payload);\r\n            if (index !== -1) {\r\n                state.notifications.splice(index, 1);\r\n                               }\r\n       },\r\n      \r\n    \r\n         setErrors(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n        \r\n\r\nexport const fetchNotifications=()=>async(dispatch)=>{\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"appliation/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n        }\r\n    }\r\n    axios.get(`/notif/getNotif`, config)\r\n                .then((response) => {\r\n                 dispatch(populateNotifications(response.data));\r\n                 console.log(response.data)\r\n                })\r\n                .catch((error) => {\r\n                  console.log(error)\r\n                })\r\n}\r\n\r\n\r\n\r\nexport const selectNotifications=(state)=>{\r\n    return [state.notifications.notifications,state.notifications.errors];\r\n}\r\nexport const {populateNotifications,addNotification,setErrors,deleteNotification,selectNotification}=notificationsSlice.actions;\r\nexport default notificationsSlice.reducer;"]},"metadata":{},"sourceType":"module"}