{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { extractConvParamsFactory, SeparableConvParams } from 'tfjs-tiny-yolov2';\nexport function extractorsFactory(extractWeights, paramMappings) {\n  function extractSeparableConvParams(channelsIn, channelsOut, mappedPrefix) {\n    var depthwise_filter = tf.tensor4d(extractWeights(3 * 3 * channelsIn), [3, 3, channelsIn, 1]);\n    var pointwise_filter = tf.tensor4d(extractWeights(channelsIn * channelsOut), [1, 1, channelsIn, channelsOut]);\n    var bias = tf.tensor1d(extractWeights(channelsOut));\n    paramMappings.push({\n      paramPath: mappedPrefix + \"/depthwise_filter\"\n    }, {\n      paramPath: mappedPrefix + \"/pointwise_filter\"\n    }, {\n      paramPath: mappedPrefix + \"/bias\"\n    });\n    return new SeparableConvParams(depthwise_filter, pointwise_filter, bias);\n  }\n\n  var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\n\n  function extractDenseBlock3Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer) {\n    if (isFirstLayer === void 0) {\n      isFirstLayer = false;\n    }\n\n    var conv0 = isFirstLayer ? extractConvParams(channelsIn, channelsOut, 3, mappedPrefix + \"/conv0\") : extractSeparableConvParams(channelsIn, channelsOut, mappedPrefix + \"/conv0\");\n    var conv1 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + \"/conv1\");\n    var conv2 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + \"/conv2\");\n    return {\n      conv0: conv0,\n      conv1: conv1,\n      conv2: conv2\n    };\n  }\n\n  function extractDenseBlock4Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer) {\n    if (isFirstLayer === void 0) {\n      isFirstLayer = false;\n    }\n\n    var _a = extractDenseBlock3Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer),\n        conv0 = _a.conv0,\n        conv1 = _a.conv1,\n        conv2 = _a.conv2;\n\n    var conv3 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + \"/conv3\");\n    return {\n      conv0: conv0,\n      conv1: conv1,\n      conv2: conv2,\n      conv3: conv3\n    };\n  }\n\n  return {\n    extractDenseBlock3Params: extractDenseBlock3Params,\n    extractDenseBlock4Params: extractDenseBlock4Params\n  };\n}","map":{"version":3,"sources":["../../../src/faceFeatureExtractor/extractorsFactory.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAZ,MAAoB,uBAApB;AAEA,SAAS,wBAAT,EAA6C,mBAA7C,QAAwE,kBAAxE;AAIA,OAAM,SAAA,iBAAA,CAA4B,cAA5B,EAAoE,aAApE,EAAiG;AAErG,WAAA,0BAAA,CAAoC,UAApC,EAAwD,WAAxD,EAA6E,YAA7E,EAAiG;AAC/F,QAAM,gBAAgB,GAAG,EAAE,CAAC,QAAH,CAAY,cAAc,CAAC,IAAI,CAAJ,GAAQ,UAAT,CAA1B,EAAgD,CAAC,CAAD,EAAI,CAAJ,EAAO,UAAP,EAAmB,CAAnB,CAAhD,CAAzB;AACA,QAAM,gBAAgB,GAAG,EAAE,CAAC,QAAH,CAAY,cAAc,CAAC,UAAU,GAAG,WAAd,CAA1B,EAAsD,CAAC,CAAD,EAAI,CAAJ,EAAO,UAAP,EAAmB,WAAnB,CAAtD,CAAzB;AACA,QAAM,IAAI,GAAG,EAAE,CAAC,QAAH,CAAY,cAAc,CAAC,WAAD,CAA1B,CAAb;AAEA,IAAA,aAAa,CAAC,IAAd,CACE;AAAE,MAAA,SAAS,EAAK,YAAY,GAAA;AAA5B,KADF,EAEE;AAAE,MAAA,SAAS,EAAK,YAAY,GAAA;AAA5B,KAFF,EAGE;AAAE,MAAA,SAAS,EAAK,YAAY,GAAA;AAA5B,KAHF;AAMA,WAAO,IAAI,mBAAJ,CACL,gBADK,EAEL,gBAFK,EAGL,IAHK,CAAP;AAKD;;AAED,MAAM,iBAAiB,GAAG,wBAAwB,CAAC,cAAD,EAAiB,aAAjB,CAAlD;;AAEA,WAAA,wBAAA,CAAkC,UAAlC,EAAsD,WAAtD,EAA2E,YAA3E,EAAiG,YAAjG,EAA8H;AAA7B,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,KAAA;AAA6B;;AAE5H,QAAM,KAAK,GAAG,YAAY,GACtB,iBAAiB,CAAC,UAAD,EAAa,WAAb,EAA0B,CAA1B,EAAgC,YAAY,GAAA,QAA5C,CADK,GAEtB,0BAA0B,CAAC,UAAD,EAAa,WAAb,EAA6B,YAAY,GAAA,QAAzC,CAF9B;AAGA,QAAM,KAAK,GAAG,0BAA0B,CAAC,WAAD,EAAc,WAAd,EAA8B,YAAY,GAAA,QAA1C,CAAxC;AACA,QAAM,KAAK,GAAG,0BAA0B,CAAC,WAAD,EAAc,WAAd,EAA8B,YAAY,GAAA,QAA1C,CAAxC;AAEA,WAAO;AAAE,MAAA,KAAK,EAAA,KAAP;AAAS,MAAA,KAAK,EAAA,KAAd;AAAgB,MAAA,KAAK,EAAA;AAArB,KAAP;AACD;;AAED,WAAA,wBAAA,CAAkC,UAAlC,EAAsD,WAAtD,EAA2E,YAA3E,EAAiG,YAAjG,EAA8H;AAA7B,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,KAAA;AAA6B;;AAEtH,QAAA,EAAA,GAAA,wBAAA,CAAA,UAAA,EAAA,WAAA,EAAA,YAAA,EAAA,YAAA,CAAA;AAAA,QAAE,KAAA,GAAA,EAAA,CAAA,KAAF;AAAA,QAAS,KAAA,GAAA,EAAA,CAAA,KAAT;AAAA,QAAgB,KAAA,GAAA,EAAA,CAAA,KAAhB;;AACN,QAAM,KAAK,GAAG,0BAA0B,CAAC,WAAD,EAAc,WAAd,EAA8B,YAAY,GAAA,QAA1C,CAAxC;AAEA,WAAO;AAAE,MAAA,KAAK,EAAA,KAAP;AAAS,MAAA,KAAK,EAAA,KAAd;AAAgB,MAAA,KAAK,EAAA,KAArB;AAAuB,MAAA,KAAK,EAAA;AAA5B,KAAP;AACD;;AAED,SAAO;AACL,IAAA,wBAAwB,EAAA,wBADnB;AAEL,IAAA,wBAAwB,EAAA;AAFnB,GAAP;AAKD","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { extractConvParamsFactory, SeparableConvParams } from 'tfjs-tiny-yolov2';\r\nexport function extractorsFactory(extractWeights, paramMappings) {\r\n    function extractSeparableConvParams(channelsIn, channelsOut, mappedPrefix) {\r\n        var depthwise_filter = tf.tensor4d(extractWeights(3 * 3 * channelsIn), [3, 3, channelsIn, 1]);\r\n        var pointwise_filter = tf.tensor4d(extractWeights(channelsIn * channelsOut), [1, 1, channelsIn, channelsOut]);\r\n        var bias = tf.tensor1d(extractWeights(channelsOut));\r\n        paramMappings.push({ paramPath: mappedPrefix + \"/depthwise_filter\" }, { paramPath: mappedPrefix + \"/pointwise_filter\" }, { paramPath: mappedPrefix + \"/bias\" });\r\n        return new SeparableConvParams(depthwise_filter, pointwise_filter, bias);\r\n    }\r\n    var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);\r\n    function extractDenseBlock3Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer) {\r\n        if (isFirstLayer === void 0) { isFirstLayer = false; }\r\n        var conv0 = isFirstLayer\r\n            ? extractConvParams(channelsIn, channelsOut, 3, mappedPrefix + \"/conv0\")\r\n            : extractSeparableConvParams(channelsIn, channelsOut, mappedPrefix + \"/conv0\");\r\n        var conv1 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + \"/conv1\");\r\n        var conv2 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + \"/conv2\");\r\n        return { conv0: conv0, conv1: conv1, conv2: conv2 };\r\n    }\r\n    function extractDenseBlock4Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer) {\r\n        if (isFirstLayer === void 0) { isFirstLayer = false; }\r\n        var _a = extractDenseBlock3Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer), conv0 = _a.conv0, conv1 = _a.conv1, conv2 = _a.conv2;\r\n        var conv3 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + \"/conv3\");\r\n        return { conv0: conv0, conv1: conv1, conv2: conv2, conv3: conv3 };\r\n    }\r\n    return {\r\n        extractDenseBlock3Params: extractDenseBlock3Params,\r\n        extractDenseBlock4Params: extractDenseBlock4Params\r\n    };\r\n}\r\n//# sourceMappingURL=extractorsFactory.js.map"]},"metadata":{},"sourceType":"module"}