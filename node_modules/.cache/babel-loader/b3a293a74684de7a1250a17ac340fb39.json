{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nlet initialState = {\n  experiences: [],\n  selectedExperience: {},\n  errors: \"\"\n};\nconst experiencesSlice = createSlice({\n  name: \"experiences\",\n  initialState,\n  reducers: {\n    populateExperiences(state, action) {\n      state.experiences = action.payload;\n    },\n\n    selectExperience(state, action) {\n      state.populateExperiences = action.payload;\n    },\n\n    addExperience: (state, action) => {\n      const payload = action.payload;\n      state.experiences.push(payload);\n    },\n    deleteExperience: (state, action) => {\n      const payload = action.payload;\n      const index = state.experiences.findIndex(experience => experience._id === payload);\n\n      if (index !== -1) {\n        state.experiences.splice(index, 1);\n      }\n    },\n    updateExperience: (state, action) => {\n      const payload = action.payload;\n      state.experiences.set(payload);\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    }\n\n  }\n});\nexport const fetchExperiences = () => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"appliation/json\",\n      Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n    }\n  };\n  axios.get(`/experience/getAll`, config).then(response => {\n    dispatch(populateExperiences(response.data));\n    console.log(response.data);\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const selectExperiences = state => {\n  return [state.experiences.experiences, state.experiences.errors];\n};\nexport const {\n  populateExperiences,\n  addExperience,\n  setErrors,\n  deleteExperience,\n  selectExperience,\n  updateExperience\n} = experiencesSlice.actions;\nexport default experiencesSlice.reducer;","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/redux/slices/experienceSlice.js"],"names":["createSlice","axios","initialState","experiences","selectedExperience","errors","experiencesSlice","name","reducers","populateExperiences","state","action","payload","selectExperience","addExperience","push","deleteExperience","index","findIndex","experience","_id","splice","updateExperience","set","setErrors","fetchExperiences","dispatch","config","headers","Authorization","localStorage","getItem","get","then","response","data","console","log","catch","error","selectExperiences","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\nlet initialState = {\r\n    experiences: [],\r\n    selectedExperience: {},\r\n    errors: \"\",\r\n    };\r\nconst experiencesSlice=createSlice({\r\n    name: \"experiences\",\r\n    initialState,\r\n    reducers: {\r\n        populateExperiences(state, action) {\r\n        state.experiences = action.payload;\r\n        },\r\n        selectExperience(state, action) {\r\n            state.populateExperiences = action.payload;\r\n            },\r\n        addExperience: (state, action) => {\r\n            const payload = action.payload;\r\n            state.experiences.push(payload);\r\n            },\r\n        deleteExperience: (state, action) => {\r\n            const payload = action.payload;\r\n            const index = state.experiences.findIndex((experience) => experience._id === payload);\r\n            if (index !== -1) {\r\n                state.experiences.splice(index, 1);\r\n                               }\r\n       },\r\n       updateExperience: (state, action) => {\r\n        const payload = action.payload;\r\n        state.experiences.set(payload);\r\n                           },\r\n      \r\n    \r\n         setErrors(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n        \r\n\r\nexport const fetchExperiences=()=>async(dispatch)=>{\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"appliation/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n        }\r\n    }\r\n    axios.get(`/experience/getAll`, config)\r\n                .then((response) => {\r\n                 dispatch(populateExperiences(response.data));\r\n                 console.log(response.data)\r\n                })\r\n                .catch((error) => {\r\n                  console.log(error)\r\n                })\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const selectExperiences=(state)=>{\r\n    return [state.experiences.experiences,state.experiences.errors];\r\n}\r\nexport const {populateExperiences,addExperience,setErrors,deleteExperience,selectExperience,updateExperience}=experiencesSlice.actions;\r\nexport default experiencesSlice.reducer;"]},"metadata":{},"sourceType":"module"}