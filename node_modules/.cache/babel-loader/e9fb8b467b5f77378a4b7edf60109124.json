{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nlet initialState = {\n  cvs: [],\n  selectedCv: {},\n  errors: \"\"\n};\nconst cvsSlice = createSlice({\n  name: \"cvs\",\n  initialState,\n  reducers: {\n    populateCvs(state, action) {\n      state.cvs = action.payload;\n    },\n\n    selectCv(state, action) {\n      state.populateCvs = action.payload;\n    },\n\n    addCv: (state, action) => {\n      const payload = action.payload;\n      state.cvs.push(payload);\n    },\n    deleteCv: (state, action) => {\n      const payload = action.payload;\n      const index = state.cvs.findIndex(cv => cv._id === payload);\n\n      if (index !== -1) {\n        state.cvs.splice(index, 1);\n      }\n    },\n    updateCv: (state, action) => {\n      const payload = action.payload;\n      state.cvs.set(payload);\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    }\n\n  }\n});\nexport const fetchCvs = () => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"appliation/json\",\n      Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n    }\n  };\n  axios.get(`/cv/getAll`, config).then(response => {\n    dispatch(populateCvs(response.data));\n    console.log(response.data);\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const selectCvs = state => {\n  return [state.cvs.cvs, state.cvs.errors];\n};\nexport const {\n  populateCvs,\n  addCv,\n  setErrors,\n  deleteCv,\n  selectCv,\n  updateCv\n} = cvsSlice.actions;\nexport default cvsSlice.reducer;","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/redux/slices/cvSlice.js"],"names":["createSlice","axios","initialState","cvs","selectedCv","errors","cvsSlice","name","reducers","populateCvs","state","action","payload","selectCv","addCv","push","deleteCv","index","findIndex","cv","_id","splice","updateCv","set","setErrors","fetchCvs","dispatch","config","headers","Authorization","localStorage","getItem","get","then","response","data","console","log","catch","error","selectCvs","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\nlet initialState = {\r\n    cvs: [],\r\n    selectedCv: {},\r\n    errors: \"\",\r\n    };\r\nconst cvsSlice=createSlice({\r\n    name: \"cvs\",\r\n    initialState,\r\n    reducers: {\r\n        populateCvs(state, action) {\r\n        state.cvs = action.payload;\r\n        },\r\n        selectCv(state, action) {\r\n            state.populateCvs = action.payload;\r\n            },\r\n        addCv: (state, action) => {\r\n            const payload = action.payload;\r\n            state.cvs.push(payload);\r\n            },\r\n        deleteCv: (state, action) => {\r\n            const payload = action.payload;\r\n            const index = state.cvs.findIndex((cv) => cv._id === payload);\r\n            if (index !== -1) {\r\n                state.cvs.splice(index, 1);\r\n                               }\r\n       },\r\n       updateCv: (state, action) => {\r\n        const payload = action.payload;\r\n        state.cvs.set(payload);\r\n                           },\r\n      \r\n    \r\n         setErrors(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n        \r\n\r\nexport const fetchCvs=()=>async(dispatch)=>{\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"appliation/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n        }\r\n    }\r\n    axios.get(`/cv/getAll`, config)\r\n                .then((response) => {\r\n                 dispatch(populateCvs(response.data));\r\n                 console.log(response.data)\r\n                })\r\n                .catch((error) => {\r\n                  console.log(error)\r\n                })\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const selectCvs=(state)=>{\r\n    return [state.cvs.cvs,state.cvs.errors];\r\n}\r\nexport const {populateCvs,addCv,setErrors,deleteCv,selectCv,updateCv}=cvsSlice.actions;\r\nexport default cvsSlice.reducer;"]},"metadata":{},"sourceType":"module"}