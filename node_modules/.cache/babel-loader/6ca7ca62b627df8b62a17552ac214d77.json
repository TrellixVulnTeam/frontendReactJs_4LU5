{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { queryApi } from \"../../utils/queryApi\";\nlet initialState = {\n  groups: [],\n  selectedGroup: {},\n  errors: \"\"\n};\nconst groupsSlice = createSlice({\n  name: \"groups\",\n  initialState,\n  reducers: {\n    populateGroups(state, action) {\n      state.groups = action.payload;\n    },\n\n    selectGroup(state, action) {\n      state.populateGroups = action.payload;\n    },\n\n    addGroup: (state, action) => {\n      const payload = action.payload;\n      state.groups.push(payload);\n    },\n    deleteGroup: (state, action) => {\n      const payload = action.payload;\n      const index = state.groups.findIndex(group => group._id === payload);\n\n      if (index !== -1) {\n        state.groups.splice(index, 1);\n      }\n    },\n    searchgroup: (state, action) => {\n      state.groups = action.payload;\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    }\n\n  }\n});\nexport const fetchGroups = () => async dispatch => {\n  const [res, error] = await queryApi(\"groups\");\n\n  if (error) {\n    console.log(error);\n  } else {\n    dispatch(populateGroups(res));\n  }\n};\nexport const searchgroupbyName = Name => async dispatch => {\n  const [res, error] = await queryApi(\"groups/search/\" + Name);\n\n  if (error) {\n    console.log(error);\n  } else {\n    dispatch(searchgroup(res));\n  }\n};\nexport const selectGroups = state => {\n  return [state.groups.groups, state.groups.errors];\n};\nexport const {\n  populateGroups,\n  selectGroup,\n  addGroup,\n  searchgroup,\n  deleteGroup,\n  setErrors\n} = groupsSlice.actions;\nexport default groupsSlice.reducer;","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/redux/slices/groupsSlice.js"],"names":["createSlice","queryApi","initialState","groups","selectedGroup","errors","groupsSlice","name","reducers","populateGroups","state","action","payload","selectGroup","addGroup","push","deleteGroup","index","findIndex","group","_id","splice","searchgroup","setErrors","fetchGroups","dispatch","res","error","console","log","searchgroupbyName","Name","selectGroups","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { queryApi } from \"../../utils/queryApi\";\r\nlet initialState = {\r\n    groups: [],\r\n    selectedGroup: {},\r\n    errors: \"\",\r\n    };\r\nconst groupsSlice=createSlice({\r\n    name: \"groups\",\r\n    initialState,\r\n    reducers: {\r\n        populateGroups(state, action) {\r\n        state.groups = action.payload;\r\n        },\r\n        selectGroup(state, action) {\r\n            state.populateGroups = action.payload;\r\n            },\r\n        addGroup: (state, action) => {\r\n            const payload = action.payload;\r\n            state.groups.push(payload);\r\n            },\r\n        deleteGroup: (state, action) => {\r\n            const payload = action.payload;\r\n            const index = state.groups.findIndex((group) => group._id === payload);\r\n            if (index !== -1) {\r\n                state.groups.splice(index, 1);\r\n                               }\r\n       },\r\n\r\n       searchgroup :(state, action)=>{\r\n        state.groups = action.payload;\r\n        \r\n        },\r\n    \r\n         setErrors(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n\r\nexport const fetchGroups=()=>async(dispatch)=>{\r\n    const [res,error]=await queryApi(\"groups\");\r\n    if(error){\r\n        console.log(error);\r\n    }\r\n    else{\r\n        dispatch(populateGroups(res));\r\n    }\r\n}\r\n\r\nexport const searchgroupbyName=(Name)=>async(dispatch)=>{\r\n    const [res,error]=await queryApi(\"groups/search/\"+Name);\r\n   \r\n    if(error){\r\n        console.log(error);\r\n    }\r\n    else{\r\n      dispatch(searchgroup(res));\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const selectGroups=(state)=>{\r\n    return [state.groups.groups,state.groups.errors];\r\n}\r\nexport const {populateGroups,selectGroup,addGroup,searchgroup,deleteGroup,setErrors}=groupsSlice.actions;\r\nexport default groupsSlice.reducer;"]},"metadata":{},"sourceType":"module"}