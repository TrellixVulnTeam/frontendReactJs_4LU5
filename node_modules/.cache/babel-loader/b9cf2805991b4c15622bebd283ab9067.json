{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nlet initialState = {\n  projects: [],\n  selectedProject: {},\n  errors: \"\"\n};\nconst projectsSlice = createSlice({\n  name: \"projects\",\n  initialState,\n  reducers: {\n    populateProjects(state, action) {\n      state.projects = action.payload;\n    },\n\n    selectProject(state, action) {\n      state.populateProjects = action.payload;\n    },\n\n    addProject: (state, action) => {\n      const payload = action.payload;\n      state.projects.push(payload);\n    },\n    deleteProject: (state, action) => {\n      const payload = action.payload;\n      const index = state.projects.findIndex(project => project._id === payload);\n\n      if (index !== -1) {\n        state.projects.splice(index, 1);\n      }\n    },\n    updateProject: (state, action) => {\n      const payload = action.payload;\n      state.projects.set(payload);\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    }\n\n  }\n});\nexport const fetchProjects = () => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"appliation/json\",\n      Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n    }\n  };\n  axios.get(`/project/getAll`, config).then(response => {\n    dispatch(populateProjects(response.data));\n    console.log(response.data);\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const selectProjects = state => {\n  return [state.projects.projects, state.projects.errors];\n};\nexport const {\n  populateProjects,\n  addProject,\n  setErrors,\n  deleteProject,\n  selectProject,\n  updateProject\n} = projectsSlice.actions;\nexport default projectsSlice.reducer;","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/redux/slices/projectSlice.js"],"names":["createSlice","axios","initialState","projects","selectedProject","errors","projectsSlice","name","reducers","populateProjects","state","action","payload","selectProject","addProject","push","deleteProject","index","findIndex","project","_id","splice","updateProject","set","setErrors","fetchProjects","dispatch","config","headers","Authorization","localStorage","getItem","get","then","response","data","console","log","catch","error","selectProjects","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\nlet initialState = {\r\n    projects: [],\r\n    selectedProject: {},\r\n    errors: \"\",\r\n    };\r\nconst projectsSlice=createSlice({\r\n    name: \"projects\",\r\n    initialState,\r\n    reducers: {\r\n        populateProjects(state, action) {\r\n        state.projects = action.payload;\r\n        },\r\n        selectProject(state, action) {\r\n            state.populateProjects = action.payload;\r\n            },\r\n        addProject: (state, action) => {\r\n            const payload = action.payload;\r\n            state.projects.push(payload);\r\n            },\r\n        deleteProject: (state, action) => {\r\n            const payload = action.payload;\r\n            const index = state.projects.findIndex((project) => project._id === payload);\r\n            if (index !== -1) {\r\n                state.projects.splice(index, 1);\r\n                               }\r\n       },\r\n       updateProject: (state, action) => {\r\n        const payload = action.payload;\r\n        state.projects.set(payload);\r\n                           },\r\n      \r\n    \r\n         setErrors(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n        \r\n\r\nexport const fetchProjects=()=>async(dispatch)=>{\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"appliation/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n        }\r\n    }\r\n    axios.get(`/project/getAll`, config)\r\n                .then((response) => {\r\n                 dispatch(populateProjects(response.data));\r\n                 console.log(response.data)\r\n                })\r\n                .catch((error) => {\r\n                  console.log(error)\r\n                })\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const selectProjects=(state)=>{\r\n    return [state.projects.projects,state.projects.errors];\r\n}\r\nexport const {populateProjects,addProject,setErrors,deleteProject,selectProject,updateProject}=projectsSlice.actions;\r\nexport default projectsSlice.reducer;"]},"metadata":{},"sourceType":"module"}