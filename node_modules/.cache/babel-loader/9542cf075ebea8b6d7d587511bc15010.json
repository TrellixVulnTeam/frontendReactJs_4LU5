{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { queryApi } from \"../utils/queryApi\";\n/**\r\n * @param {String} endpoint relative endpoint\r\n * @param {object} body request body\r\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default GET\r\n * @param {boolean} transformBody whether to transform the request body from JSON to FormData | Default false\r\n */\n\nexport function useApi(endpoint) {\n  _s();\n\n  var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"GET\";\n  var transformBody = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  // Create state values\n  // result, error and the body we will send\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      result = _useState2[0],\n      setResult = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(body),\n      _useState6 = _slicedToArray(_useState5, 2),\n      bodyUsed = _useState6[0],\n      setBodyUsed = _useState6[1]; // query that will call the queryApi function, takes only a new body argument (optional)\n\n\n  function query(_x) {\n    return _query.apply(this, arguments);\n  } // On hook init call the query once with initial arguments\n\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newBody) {\n      var _yield$queryApi, _yield$queryApi2, res, err;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (newBody) setBodyUsed(newBody); // If the endpoint is empty return an empty value\n\n              if (endpoint) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              setError(false);\n              setResult(null); // Normal call to queryApi, deconstructed into result and error\n\n              _context.next = 7;\n              return queryApi(endpoint, bodyUsed, method, transformBody);\n\n            case 7:\n              _yield$queryApi = _context.sent;\n              _yield$queryApi2 = _slicedToArray(_yield$queryApi, 2);\n              res = _yield$queryApi2[0];\n              err = _yield$queryApi2[1];\n              setResult(res);\n              setError(err);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    query(); // eslint-disable-next-line\n  }, []); // Deconstruct the hook into result, error and a function that can update the hook\n\n  return [result, error, query];\n}\n\n_s(useApi, \"4fwKu2mD1ebmInWY0I7lmBNojeY=\");","map":{"version":3,"sources":["C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/src/hooks/useApi.js"],"names":["useState","useEffect","queryApi","useApi","endpoint","body","method","transformBody","result","setResult","error","setError","bodyUsed","setBodyUsed","query","newBody","res","err"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CACLC,QADK,EAKL;AAAA;;AAAA,MAHAC,IAGA,uEAHO,IAGP;AAAA,MAFAC,MAEA,uEAFS,KAET;AAAA,MADAC,aACA,uEADgB,KAChB;;AACA;AACA;AAFA,kBAG4BP,QAAQ,CAAC,IAAD,CAHpC;AAAA;AAAA,MAGOQ,MAHP;AAAA,MAGeC,SAHf;;AAAA,mBAI0BT,QAAQ,CAAC,IAAD,CAJlC;AAAA;AAAA,MAIOU,KAJP;AAAA,MAIcC,QAJd;;AAAA,mBAKgCX,QAAQ,CAACK,IAAD,CALxC;AAAA;AAAA,MAKOO,QALP;AAAA,MAKiBC,WALjB,kBAOA;;;AAPA,WAQeC,KARf;AAAA;AAAA,IA0BA;;;AA1BA;AAAA,sEAQA,iBAAqBC,OAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACE,kBAAIA,OAAJ,EAAaF,WAAW,CAACE,OAAD,CAAX,CADf,CAEE;;AAFF,kBAGOX,QAHP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIEO,cAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,cAAAA,SAAS,CAAC,IAAD,CAAT,CALF,CAME;;AANF;AAAA,qBAO2BP,QAAQ,CAC/BE,QAD+B,EAE/BQ,QAF+B,EAG/BN,MAH+B,EAI/BC,aAJ+B,CAPnC;;AAAA;AAAA;AAAA;AAOSS,cAAAA,GAPT;AAOcC,cAAAA,GAPd;AAcER,cAAAA,SAAS,CAACO,GAAD,CAAT;AACAL,cAAAA,QAAQ,CAACM,GAAD,CAAR;;AAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KARA;AAAA;AAAA;;AA2BAhB,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,KAAK,GADS,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT,CA3BA,CAgCA;;AACA,SAAO,CAACN,MAAD,EAASE,KAAT,EAAgBI,KAAhB,CAAP;AACD;;GAvCeX,M","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { queryApi } from \"../utils/queryApi\";\r\n\r\n/**\r\n * @param {String} endpoint relative endpoint\r\n * @param {object} body request body\r\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default GET\r\n * @param {boolean} transformBody whether to transform the request body from JSON to FormData | Default false\r\n */\r\nexport function useApi(\r\n  endpoint,\r\n  body = null,\r\n  method = \"GET\",\r\n  transformBody = false\r\n) {\r\n  // Create state values\r\n  // result, error and the body we will send\r\n  const [result, setResult] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [bodyUsed, setBodyUsed] = useState(body);\r\n\r\n  // query that will call the queryApi function, takes only a new body argument (optional)\r\n  async function query(newBody) {\r\n    if (newBody) setBodyUsed(newBody);\r\n    // If the endpoint is empty return an empty value\r\n    if (!endpoint) return;\r\n    setError(false);\r\n    setResult(null);\r\n    // Normal call to queryApi, deconstructed into result and error\r\n    const [res, err] = await queryApi(\r\n      endpoint,\r\n      bodyUsed,\r\n      method,\r\n      transformBody\r\n    );\r\n\r\n    setResult(res);\r\n    setError(err);\r\n  }\r\n\r\n  // On hook init call the query once with initial arguments\r\n  useEffect(() => {\r\n    query();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  // Deconstruct the hook into result, error and a function that can update the hook\r\n  return [result, error, query];\r\n}"]},"metadata":{},"sourceType":"module"}