{"ast":null,"code":"import { env, getContext2dOrThrow, getDefaultDrawOptions, resolveInput } from 'tfjs-image-recognition-base';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { drawContour } from './drawContour';\nexport function drawLandmarks(canvasArg, faceLandmarks, options) {\n  var canvas = resolveInput(canvasArg);\n\n  if (!(canvas instanceof env.getEnv().Canvas)) {\n    throw new Error('drawLandmarks - expected canvas to be of type: HTMLCanvasElement');\n  }\n\n  var drawOptions = Object.assign(getDefaultDrawOptions(options), options || {});\n  var drawLines = Object.assign({\n    drawLines: false\n  }, options || {}).drawLines;\n  var ctx = getContext2dOrThrow(canvas);\n  var lineWidth = drawOptions.lineWidth,\n      _a = drawOptions.color,\n      color = _a === void 0 ? 'blue' : _a;\n  var faceLandmarksArray = Array.isArray(faceLandmarks) ? faceLandmarks : [faceLandmarks];\n  faceLandmarksArray.forEach(function (landmarks) {\n    if (drawLines && landmarks instanceof FaceLandmarks68) {\n      ctx.strokeStyle = color;\n      ctx.lineWidth = lineWidth;\n      drawContour(ctx, landmarks.getJawOutline());\n      drawContour(ctx, landmarks.getLeftEyeBrow());\n      drawContour(ctx, landmarks.getRightEyeBrow());\n      drawContour(ctx, landmarks.getNose());\n      drawContour(ctx, landmarks.getLeftEye(), true);\n      drawContour(ctx, landmarks.getRightEye(), true);\n      drawContour(ctx, landmarks.getMouth(), true);\n      return;\n    } // else draw points\n\n\n    var ptOffset = lineWidth / 2;\n    ctx.fillStyle = color;\n    landmarks.positions.forEach(function (pt) {\n      return ctx.fillRect(pt.x - ptOffset, pt.y - ptOffset, lineWidth, lineWidth);\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/dom/drawLandmarks.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,EAAc,mBAAd,EAAmC,qBAAnC,EAA0D,YAA1D,QAA8E,6BAA9E;AAGA,SAAS,eAAT,QAAgC,4BAAhC;AACA,SAAS,WAAT,QAA4B,eAA5B;AAGA,OAAM,SAAA,aAAA,CACJ,SADI,EAEJ,aAFI,EAGJ,OAHI,EAG0B;AAE9B,MAAM,MAAM,GAAG,YAAY,CAAC,SAAD,CAA3B;;AACA,MAAI,EAAE,MAAM,YAAY,GAAG,CAAC,MAAJ,GAAa,MAAjC,CAAJ,EAA8C;AAC5C,UAAM,IAAI,KAAJ,CAAU,kEAAV,CAAN;AACD;;AAED,MAAM,WAAW,GAAG,MAAM,CAAC,MAAP,CAClB,qBAAqB,CAAC,OAAD,CADH,EAEjB,OAAO,IAAI,EAFM,CAApB;AAKQ,MAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA;AAAA,IAAA,SAAA,EAAA;AAAA,GAAA,EAAA,OAAA,IAAA,EAAA,EAAA,SAAA;AAER,MAAM,GAAG,GAAG,mBAAmB,CAAC,MAAD,CAA/B;AACQ,MAAA,SAAA,GAAA,WAAA,CAAA,SAAA;AAAA,MAAW,EAAA,GAAA,WAAA,CAAA,KAAX;AAAA,MAAW,KAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,MAAA,GAAA,EAAX;AAER,MAAM,kBAAkB,GAAG,KAAK,CAAC,OAAN,CAAc,aAAd,IAA+B,aAA/B,GAA+C,CAAC,aAAD,CAA1E;AAEA,EAAA,kBAAkB,CAAC,OAAnB,CAA2B,UAAA,SAAA,EAAS;AAClC,QAAI,SAAS,IAAI,SAAS,YAAY,eAAtC,EAAuD;AACrD,MAAA,GAAG,CAAC,WAAJ,GAAkB,KAAlB;AACA,MAAA,GAAG,CAAC,SAAJ,GAAgB,SAAhB;AACA,MAAA,WAAW,CAAC,GAAD,EAAM,SAAS,CAAC,aAAV,EAAN,CAAX;AACA,MAAA,WAAW,CAAC,GAAD,EAAM,SAAS,CAAC,cAAV,EAAN,CAAX;AACA,MAAA,WAAW,CAAC,GAAD,EAAM,SAAS,CAAC,eAAV,EAAN,CAAX;AACA,MAAA,WAAW,CAAC,GAAD,EAAM,SAAS,CAAC,OAAV,EAAN,CAAX;AACA,MAAA,WAAW,CAAC,GAAD,EAAM,SAAS,CAAC,UAAV,EAAN,EAA8B,IAA9B,CAAX;AACA,MAAA,WAAW,CAAC,GAAD,EAAM,SAAS,CAAC,WAAV,EAAN,EAA+B,IAA/B,CAAX;AACA,MAAA,WAAW,CAAC,GAAD,EAAM,SAAS,CAAC,QAAV,EAAN,EAA4B,IAA5B,CAAX;AACA;AACD,KAZiC,CAclC;;;AACA,QAAM,QAAQ,GAAG,SAAS,GAAG,CAA7B;AACA,IAAA,GAAG,CAAC,SAAJ,GAAgB,KAAhB;AACA,IAAA,SAAS,CAAC,SAAV,CAAoB,OAApB,CAA4B,UAAA,EAAA,EAAE;AAAI,aAAA,GAAG,CAAC,QAAJ,CAAa,EAAE,CAAC,CAAH,GAAO,QAApB,EAA8B,EAAE,CAAC,CAAH,GAAO,QAArC,EAA+C,SAA/C,EAAA,SAAA,CAAA;AAAoE,KAAtG;AACD,GAlBD;AAmBD","sourceRoot":"","sourcesContent":["import { env, getContext2dOrThrow, getDefaultDrawOptions, resolveInput } from 'tfjs-image-recognition-base';\r\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\r\nimport { drawContour } from './drawContour';\r\nexport function drawLandmarks(canvasArg, faceLandmarks, options) {\r\n    var canvas = resolveInput(canvasArg);\r\n    if (!(canvas instanceof env.getEnv().Canvas)) {\r\n        throw new Error('drawLandmarks - expected canvas to be of type: HTMLCanvasElement');\r\n    }\r\n    var drawOptions = Object.assign(getDefaultDrawOptions(options), (options || {}));\r\n    var drawLines = Object.assign({ drawLines: false }, (options || {})).drawLines;\r\n    var ctx = getContext2dOrThrow(canvas);\r\n    var lineWidth = drawOptions.lineWidth, _a = drawOptions.color, color = _a === void 0 ? 'blue' : _a;\r\n    var faceLandmarksArray = Array.isArray(faceLandmarks) ? faceLandmarks : [faceLandmarks];\r\n    faceLandmarksArray.forEach(function (landmarks) {\r\n        if (drawLines && landmarks instanceof FaceLandmarks68) {\r\n            ctx.strokeStyle = color;\r\n            ctx.lineWidth = lineWidth;\r\n            drawContour(ctx, landmarks.getJawOutline());\r\n            drawContour(ctx, landmarks.getLeftEyeBrow());\r\n            drawContour(ctx, landmarks.getRightEyeBrow());\r\n            drawContour(ctx, landmarks.getNose());\r\n            drawContour(ctx, landmarks.getLeftEye(), true);\r\n            drawContour(ctx, landmarks.getRightEye(), true);\r\n            drawContour(ctx, landmarks.getMouth(), true);\r\n            return;\r\n        }\r\n        // else draw points\r\n        var ptOffset = lineWidth / 2;\r\n        ctx.fillStyle = color;\r\n        landmarks.positions.forEach(function (pt) { return ctx.fillRect(pt.x - ptOffset, pt.y - ptOffset, lineWidth, lineWidth); });\r\n    });\r\n}\r\n//# sourceMappingURL=drawLandmarks.js.map"]},"metadata":{},"sourceType":"module"}