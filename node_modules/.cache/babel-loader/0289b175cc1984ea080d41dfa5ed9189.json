{"ast":null,"code":"import * as tf from '@tensorflow/tfjs-core';\nimport { BoundingBox, Dimensions, iou, Rect } from 'tfjs-image-recognition-base';\nimport { CELL_SIZE } from './const';\n\nvar TinyYolov2LossFunction =\n/** @class */\nfunction () {\n  function TinyYolov2LossFunction(outputTensor, groundTruth, predictedBoxes, reshapedImgDims, config) {\n    this._config = config;\n    this._reshapedImgDims = new Dimensions(reshapedImgDims.width, reshapedImgDims.height);\n    this._outputTensor = outputTensor;\n    this._predictedBoxes = predictedBoxes;\n    this.validateGroundTruthBoxes(groundTruth);\n    this._groundTruth = this.assignGroundTruthToAnchors(groundTruth);\n    var groundTruthMask = this.createGroundTruthMask();\n\n    var _a = this.createCoordAndScoreMasks(),\n        coordBoxOffsetMask = _a.coordBoxOffsetMask,\n        coordBoxSizeMask = _a.coordBoxSizeMask,\n        scoreMask = _a.scoreMask;\n\n    this.noObjectLossMask = tf.tidy(function () {\n      return tf.mul(scoreMask, tf.sub(tf.scalar(1), groundTruthMask));\n    });\n    this.objectLossMask = tf.tidy(function () {\n      return tf.mul(scoreMask, groundTruthMask);\n    });\n    this.coordBoxOffsetMask = tf.tidy(function () {\n      return tf.mul(coordBoxOffsetMask, groundTruthMask);\n    });\n    this.coordBoxSizeMask = tf.tidy(function () {\n      return tf.mul(coordBoxSizeMask, groundTruthMask);\n    });\n    var classScoresMask = tf.tidy(function () {\n      return tf.sub(tf.scalar(1), coordBoxOffsetMask.add(coordBoxSizeMask).add(scoreMask));\n    });\n    this.groundTruthClassScoresMask = tf.tidy(function () {\n      return tf.mul(classScoresMask, groundTruthMask);\n    });\n  }\n\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"config\", {\n    get: function get() {\n      return this._config;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"reshapedImgDims\", {\n    get: function get() {\n      return this._reshapedImgDims;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"outputTensor\", {\n    get: function get() {\n      return this._outputTensor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"groundTruth\", {\n    get: function get() {\n      return this._groundTruth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"predictedBoxes\", {\n    get: function get() {\n      return this._predictedBoxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"inputSize\", {\n    get: function get() {\n      return Math.max(this.reshapedImgDims.width, this.reshapedImgDims.height);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"withClassScores\", {\n    get: function get() {\n      return this._config.withClassScores || this._config.classes.length > 1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"boxEncodingSize\", {\n    get: function get() {\n      return 5 + (this.withClassScores ? this._config.classes.length : 0);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"anchors\", {\n    get: function get() {\n      return this._config.anchors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"numBoxes\", {\n    get: function get() {\n      return this.anchors.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"numCells\", {\n    get: function get() {\n      return this.inputSize / CELL_SIZE;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TinyYolov2LossFunction.prototype, \"gridCellEncodingSize\", {\n    get: function get() {\n      return this.boxEncodingSize * this.numBoxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TinyYolov2LossFunction.prototype.toOutputTensorShape = function (tensor) {\n    var _this = this;\n\n    return tf.tidy(function () {\n      return tensor.reshape([1, _this.numCells, _this.numCells, _this.gridCellEncodingSize]);\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.computeLoss = function () {\n    var _this = this;\n\n    return tf.tidy(function () {\n      var noObjectLoss = _this.computeNoObjectLoss();\n\n      var objectLoss = _this.computeObjectLoss();\n\n      var coordLoss = _this.computeCoordLoss();\n\n      var classLoss = _this.withClassScores ? _this.computeClassLoss() : tf.scalar(0);\n      var totalLoss = tf.tidy(function () {\n        return noObjectLoss.add(objectLoss).add(coordLoss).add(classLoss);\n      });\n      return {\n        noObjectLoss: noObjectLoss,\n        objectLoss: objectLoss,\n        coordLoss: coordLoss,\n        classLoss: classLoss,\n        totalLoss: totalLoss\n      };\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.computeNoObjectLoss = function () {\n    var _this = this;\n\n    return tf.tidy(function () {\n      return _this.computeLossTerm(_this.config.noObjectScale, _this.toOutputTensorShape(_this.noObjectLossMask), tf.sigmoid(_this.outputTensor));\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.computeObjectLoss = function () {\n    var _this = this;\n\n    return tf.tidy(function () {\n      return _this.computeLossTerm(_this.config.objectScale, _this.toOutputTensorShape(_this.objectLossMask), tf.sub(_this.toOutputTensorShape(_this.computeIous()), tf.sigmoid(_this.outputTensor)));\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.computeClassLoss = function () {\n    var _this = this;\n\n    return tf.tidy(function () {\n      var classLossTensor = tf.tidy(function () {\n        var predClassScores = tf.mul(tf.softmax(_this.outputTensor.reshape([_this.numCells, _this.numCells, _this.numBoxes, _this.boxEncodingSize]), 3), _this.groundTruthClassScoresMask);\n\n        var gtClassScores = _this.createOneHotClassScoreMask();\n\n        return tf.sub(gtClassScores, predClassScores);\n      });\n      return _this.computeLossTerm(_this.config.classScale, tf.scalar(1), classLossTensor);\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.computeCoordLoss = function () {\n    var _this = this;\n\n    return tf.tidy(function () {\n      return _this.computeLossTerm(_this.config.coordScale, tf.scalar(1), tf.add(_this.computeCoordBoxOffsetError(), _this.computeCoordBoxSizeError()));\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.computeCoordBoxOffsetError = function () {\n    var _this = this;\n\n    return tf.tidy(function () {\n      var mask = _this.toOutputTensorShape(_this.coordBoxOffsetMask);\n\n      var gtBoxOffsets = tf.mul(mask, _this.toOutputTensorShape(_this.computeCoordBoxOffsets()));\n      var predBoxOffsets = tf.mul(mask, tf.sigmoid(_this.outputTensor));\n      return tf.sub(gtBoxOffsets, predBoxOffsets);\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.computeCoordBoxSizeError = function () {\n    var _this = this;\n\n    return tf.tidy(function () {\n      var mask = _this.toOutputTensorShape(_this.coordBoxSizeMask);\n\n      var gtBoxSizes = tf.mul(mask, _this.toOutputTensorShape(_this.computeCoordBoxSizes()));\n      var predBoxSizes = tf.mul(mask, _this.outputTensor);\n      return tf.sub(gtBoxSizes, predBoxSizes);\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.computeLossTerm = function (scale, mask, lossTensor) {\n    var _this = this;\n\n    return tf.tidy(function () {\n      return tf.mul(tf.scalar(scale), _this.squaredSumOverMask(mask, lossTensor));\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.squaredSumOverMask = function (mask, lossTensor) {\n    return tf.tidy(function () {\n      return tf.sum(tf.square(tf.mul(mask, lossTensor)));\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.validateGroundTruthBoxes = function (groundTruth) {\n    var _this = this;\n\n    groundTruth.forEach(function (_a) {\n      var x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height,\n          label = _a.label;\n\n      if (typeof label !== 'number' || label < 0 || label > _this.config.classes.length - 1) {\n        throw new Error(\"invalid ground truth data, expected label to be a number in [0, \" + (_this.config.classes.length - 1) + \"]\");\n      }\n\n      if (x < 0 || x > 1 || y < 0 || y > 1 || width < 0 || x + width > 1 || height < 0 || y + height > 1) {\n        throw new Error(\"invalid ground truth data, box is out of image boundaries \" + JSON.stringify({\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        }));\n      }\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.assignGroundTruthToAnchors = function (groundTruth) {\n    var _this = this;\n\n    var groundTruthBoxes = groundTruth.map(function (_a) {\n      var x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height,\n          label = _a.label;\n      return {\n        box: new Rect(x, y, width, height),\n        label: label\n      };\n    });\n    return groundTruthBoxes.map(function (_a) {\n      var box = _a.box,\n          label = _a.label;\n\n      var _b = box.rescale(_this.reshapedImgDims),\n          left = _b.left,\n          top = _b.top,\n          bottom = _b.bottom,\n          right = _b.right,\n          x = _b.x,\n          y = _b.y,\n          width = _b.width,\n          height = _b.height;\n\n      var ctX = left + width / 2;\n      var ctY = top + height / 2;\n      var col = Math.floor(ctX / _this.inputSize * _this.numCells);\n      var row = Math.floor(ctY / _this.inputSize * _this.numCells);\n\n      var anchorsByIou = _this.anchors.map(function (anchor, idx) {\n        return {\n          idx: idx,\n          iou: iou(new BoundingBox(0, 0, anchor.x * CELL_SIZE, anchor.y * CELL_SIZE), new BoundingBox(0, 0, width, height))\n        };\n      }).sort(function (a1, a2) {\n        return a2.iou - a1.iou;\n      });\n\n      var anchor = anchorsByIou[0].idx;\n      return {\n        row: row,\n        col: col,\n        anchor: anchor,\n        box: box,\n        label: label\n      };\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.createGroundTruthMask = function () {\n    var _this = this;\n\n    var mask = tf.zeros([this.numCells, this.numCells, this.numBoxes, this.boxEncodingSize]);\n    var buf = mask.buffer();\n    this.groundTruth.forEach(function (_a) {\n      var row = _a.row,\n          col = _a.col,\n          anchor = _a.anchor;\n\n      for (var i = 0; i < _this.boxEncodingSize; i++) {\n        buf.set(1, row, col, anchor, i);\n      }\n    });\n    return mask;\n  };\n\n  TinyYolov2LossFunction.prototype.createCoordAndScoreMasks = function () {\n    var _this = this;\n\n    return tf.tidy(function () {\n      var coordBoxOffsetMask = tf.zeros([_this.numCells, _this.numCells, _this.numBoxes, _this.boxEncodingSize]);\n      var coordBoxSizeMask = tf.zeros([_this.numCells, _this.numCells, _this.numBoxes, _this.boxEncodingSize]);\n      var scoreMask = tf.zeros([_this.numCells, _this.numCells, _this.numBoxes, _this.boxEncodingSize]);\n      var coordBoxOffsetBuf = coordBoxOffsetMask.buffer();\n      var coordBoxSizeBuf = coordBoxSizeMask.buffer();\n      var scoreBuf = scoreMask.buffer();\n\n      for (var row = 0; row < _this.numCells; row++) {\n        for (var col = 0; col < _this.numCells; col++) {\n          for (var anchor = 0; anchor < _this.numBoxes; anchor++) {\n            coordBoxOffsetBuf.set(1, row, col, anchor, 0);\n            coordBoxOffsetBuf.set(1, row, col, anchor, 1);\n            coordBoxSizeBuf.set(1, row, col, anchor, 2);\n            coordBoxSizeBuf.set(1, row, col, anchor, 3);\n            scoreBuf.set(1, row, col, anchor, 4);\n          }\n        }\n      }\n\n      return {\n        coordBoxOffsetMask: coordBoxOffsetMask,\n        coordBoxSizeMask: coordBoxSizeMask,\n        scoreMask: scoreMask\n      };\n    });\n  };\n\n  TinyYolov2LossFunction.prototype.createOneHotClassScoreMask = function () {\n    var mask = tf.zeros([this.numCells, this.numCells, this.numBoxes, this.boxEncodingSize]);\n    var buf = mask.buffer();\n    var classValuesOffset = 5;\n    this.groundTruth.forEach(function (_a) {\n      var row = _a.row,\n          col = _a.col,\n          anchor = _a.anchor,\n          label = _a.label;\n      buf.set(1, row, col, anchor, classValuesOffset + label);\n    });\n    return mask;\n  };\n\n  TinyYolov2LossFunction.prototype.computeIous = function () {\n    var _this = this;\n\n    var isSameAnchor = function isSameAnchor(p1) {\n      return function (p2) {\n        return p1.row === p2.row && p1.col === p2.col && p1.anchor === p2.anchor;\n      };\n    };\n\n    var ious = tf.zeros([this.numCells, this.numCells, this.gridCellEncodingSize]);\n    var buf = ious.buffer();\n    this.groundTruth.forEach(function (_a) {\n      var row = _a.row,\n          col = _a.col,\n          anchor = _a.anchor,\n          box = _a.box;\n\n      var predBox = _this.predictedBoxes.find(isSameAnchor({\n        row: row,\n        col: col,\n        anchor: anchor\n      }));\n\n      if (!predBox) {\n        throw new Error(\"no output box found for: row \" + row + \", col \" + col + \", anchor \" + anchor);\n      }\n\n      var boxIou = iou(box.rescale(_this.reshapedImgDims), predBox.box.rescale(_this.reshapedImgDims));\n      var anchorOffset = _this.boxEncodingSize * anchor;\n      var scoreValueOffset = 4;\n      buf.set(boxIou, row, col, anchorOffset + scoreValueOffset);\n    });\n    return ious;\n  };\n\n  TinyYolov2LossFunction.prototype.computeCoordBoxOffsets = function () {\n    var _this = this;\n\n    var offsets = tf.zeros([this.numCells, this.numCells, this.numBoxes, this.boxEncodingSize]);\n    var buf = offsets.buffer();\n    this.groundTruth.forEach(function (_a) {\n      var row = _a.row,\n          col = _a.col,\n          anchor = _a.anchor,\n          box = _a.box;\n\n      var _b = box.rescale(_this.reshapedImgDims),\n          left = _b.left,\n          top = _b.top,\n          right = _b.right,\n          bottom = _b.bottom;\n\n      var centerX = (left + right) / 2;\n      var centerY = (top + bottom) / 2;\n      var dCenterX = centerX - col * CELL_SIZE;\n      var dCenterY = centerY - row * CELL_SIZE; // inverseSigmoid(0) === -Infinity, inverseSigmoid(1) === Infinity\n      //const dx = inverseSigmoid(Math.min(0.999, Math.max(0.001, dCenterX / CELL_SIZE)))\n      //const dy = inverseSigmoid(Math.min(0.999, Math.max(0.001, dCenterY / CELL_SIZE)))\n\n      var dx = dCenterX / CELL_SIZE;\n      var dy = dCenterY / CELL_SIZE;\n      buf.set(dx, row, col, anchor, 0);\n      buf.set(dy, row, col, anchor, 1);\n    });\n    return offsets;\n  };\n\n  TinyYolov2LossFunction.prototype.computeCoordBoxSizes = function () {\n    var _this = this;\n\n    var sizes = tf.zeros([this.numCells, this.numCells, this.numBoxes, this.boxEncodingSize]);\n    var buf = sizes.buffer();\n    this.groundTruth.forEach(function (_a) {\n      var row = _a.row,\n          col = _a.col,\n          anchor = _a.anchor,\n          box = _a.box;\n\n      var _b = box.rescale(_this.reshapedImgDims),\n          width = _b.width,\n          height = _b.height;\n\n      var dw = Math.log(width / (_this.anchors[anchor].x * CELL_SIZE));\n      var dh = Math.log(height / (_this.anchors[anchor].y * CELL_SIZE));\n      buf.set(dw, row, col, anchor, 2);\n      buf.set(dh, row, col, anchor, 3);\n    });\n    return sizes;\n  };\n\n  return TinyYolov2LossFunction;\n}();\n\nexport { TinyYolov2LossFunction };","map":{"version":3,"sources":["../../../src/tinyYolov2/TinyYolov2LossFunction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tf from '@tensorflow/tfjs-core';\r\nimport { BoundingBox, Dimensions, iou, Rect } from 'tfjs-image-recognition-base';\r\nimport { CELL_SIZE } from './const';\r\nvar TinyYolov2LossFunction = /** @class */ (function () {\r\n    function TinyYolov2LossFunction(outputTensor, groundTruth, predictedBoxes, reshapedImgDims, config) {\r\n        this._config = config;\r\n        this._reshapedImgDims = new Dimensions(reshapedImgDims.width, reshapedImgDims.height);\r\n        this._outputTensor = outputTensor;\r\n        this._predictedBoxes = predictedBoxes;\r\n        this.validateGroundTruthBoxes(groundTruth);\r\n        this._groundTruth = this.assignGroundTruthToAnchors(groundTruth);\r\n        var groundTruthMask = this.createGroundTruthMask();\r\n        var _a = this.createCoordAndScoreMasks(), coordBoxOffsetMask = _a.coordBoxOffsetMask, coordBoxSizeMask = _a.coordBoxSizeMask, scoreMask = _a.scoreMask;\r\n        this.noObjectLossMask = tf.tidy(function () { return tf.mul(scoreMask, tf.sub(tf.scalar(1), groundTruthMask)); });\r\n        this.objectLossMask = tf.tidy(function () { return tf.mul(scoreMask, groundTruthMask); });\r\n        this.coordBoxOffsetMask = tf.tidy(function () { return tf.mul(coordBoxOffsetMask, groundTruthMask); });\r\n        this.coordBoxSizeMask = tf.tidy(function () { return tf.mul(coordBoxSizeMask, groundTruthMask); });\r\n        var classScoresMask = tf.tidy(function () { return tf.sub(tf.scalar(1), coordBoxOffsetMask.add(coordBoxSizeMask).add(scoreMask)); });\r\n        this.groundTruthClassScoresMask = tf.tidy(function () { return tf.mul(classScoresMask, groundTruthMask); });\r\n    }\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"config\", {\r\n        get: function () {\r\n            return this._config;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"reshapedImgDims\", {\r\n        get: function () {\r\n            return this._reshapedImgDims;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"outputTensor\", {\r\n        get: function () {\r\n            return this._outputTensor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"groundTruth\", {\r\n        get: function () {\r\n            return this._groundTruth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"predictedBoxes\", {\r\n        get: function () {\r\n            return this._predictedBoxes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"inputSize\", {\r\n        get: function () {\r\n            return Math.max(this.reshapedImgDims.width, this.reshapedImgDims.height);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"withClassScores\", {\r\n        get: function () {\r\n            return this._config.withClassScores || this._config.classes.length > 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"boxEncodingSize\", {\r\n        get: function () {\r\n            return 5 + (this.withClassScores ? this._config.classes.length : 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"anchors\", {\r\n        get: function () {\r\n            return this._config.anchors;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"numBoxes\", {\r\n        get: function () {\r\n            return this.anchors.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"numCells\", {\r\n        get: function () {\r\n            return this.inputSize / CELL_SIZE;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TinyYolov2LossFunction.prototype, \"gridCellEncodingSize\", {\r\n        get: function () {\r\n            return this.boxEncodingSize * this.numBoxes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TinyYolov2LossFunction.prototype.toOutputTensorShape = function (tensor) {\r\n        var _this = this;\r\n        return tf.tidy(function () { return tensor.reshape([1, _this.numCells, _this.numCells, _this.gridCellEncodingSize]); });\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeLoss = function () {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            var noObjectLoss = _this.computeNoObjectLoss();\r\n            var objectLoss = _this.computeObjectLoss();\r\n            var coordLoss = _this.computeCoordLoss();\r\n            var classLoss = _this.withClassScores\r\n                ? _this.computeClassLoss()\r\n                : tf.scalar(0);\r\n            var totalLoss = tf.tidy(function () { return noObjectLoss.add(objectLoss).add(coordLoss).add(classLoss); });\r\n            return {\r\n                noObjectLoss: noObjectLoss,\r\n                objectLoss: objectLoss,\r\n                coordLoss: coordLoss,\r\n                classLoss: classLoss,\r\n                totalLoss: totalLoss\r\n            };\r\n        });\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeNoObjectLoss = function () {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            return _this.computeLossTerm(_this.config.noObjectScale, _this.toOutputTensorShape(_this.noObjectLossMask), tf.sigmoid(_this.outputTensor));\r\n        });\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeObjectLoss = function () {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            return _this.computeLossTerm(_this.config.objectScale, _this.toOutputTensorShape(_this.objectLossMask), tf.sub(_this.toOutputTensorShape(_this.computeIous()), tf.sigmoid(_this.outputTensor)));\r\n        });\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeClassLoss = function () {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            var classLossTensor = tf.tidy(function () {\r\n                var predClassScores = tf.mul(tf.softmax(_this.outputTensor.reshape([_this.numCells, _this.numCells, _this.numBoxes, _this.boxEncodingSize]), 3), _this.groundTruthClassScoresMask);\r\n                var gtClassScores = _this.createOneHotClassScoreMask();\r\n                return tf.sub(gtClassScores, predClassScores);\r\n            });\r\n            return _this.computeLossTerm(_this.config.classScale, tf.scalar(1), classLossTensor);\r\n        });\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeCoordLoss = function () {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            return _this.computeLossTerm(_this.config.coordScale, tf.scalar(1), tf.add(_this.computeCoordBoxOffsetError(), _this.computeCoordBoxSizeError()));\r\n        });\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeCoordBoxOffsetError = function () {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            var mask = _this.toOutputTensorShape(_this.coordBoxOffsetMask);\r\n            var gtBoxOffsets = tf.mul(mask, _this.toOutputTensorShape(_this.computeCoordBoxOffsets()));\r\n            var predBoxOffsets = tf.mul(mask, tf.sigmoid(_this.outputTensor));\r\n            return tf.sub(gtBoxOffsets, predBoxOffsets);\r\n        });\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeCoordBoxSizeError = function () {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            var mask = _this.toOutputTensorShape(_this.coordBoxSizeMask);\r\n            var gtBoxSizes = tf.mul(mask, _this.toOutputTensorShape(_this.computeCoordBoxSizes()));\r\n            var predBoxSizes = tf.mul(mask, _this.outputTensor);\r\n            return tf.sub(gtBoxSizes, predBoxSizes);\r\n        });\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeLossTerm = function (scale, mask, lossTensor) {\r\n        var _this = this;\r\n        return tf.tidy(function () { return tf.mul(tf.scalar(scale), _this.squaredSumOverMask(mask, lossTensor)); });\r\n    };\r\n    TinyYolov2LossFunction.prototype.squaredSumOverMask = function (mask, lossTensor) {\r\n        return tf.tidy(function () { return tf.sum(tf.square(tf.mul(mask, lossTensor))); });\r\n    };\r\n    TinyYolov2LossFunction.prototype.validateGroundTruthBoxes = function (groundTruth) {\r\n        var _this = this;\r\n        groundTruth.forEach(function (_a) {\r\n            var x = _a.x, y = _a.y, width = _a.width, height = _a.height, label = _a.label;\r\n            if (typeof label !== 'number' || label < 0 || label > (_this.config.classes.length - 1)) {\r\n                throw new Error(\"invalid ground truth data, expected label to be a number in [0, \" + (_this.config.classes.length - 1) + \"]\");\r\n            }\r\n            if (x < 0 || x > 1 || y < 0 || y > 1 || width < 0 || (x + width) > 1 || height < 0 || (y + height) > 1) {\r\n                throw new Error(\"invalid ground truth data, box is out of image boundaries \" + JSON.stringify({ x: x, y: y, width: width, height: height }));\r\n            }\r\n        });\r\n    };\r\n    TinyYolov2LossFunction.prototype.assignGroundTruthToAnchors = function (groundTruth) {\r\n        var _this = this;\r\n        var groundTruthBoxes = groundTruth\r\n            .map(function (_a) {\r\n            var x = _a.x, y = _a.y, width = _a.width, height = _a.height, label = _a.label;\r\n            return ({\r\n                box: new Rect(x, y, width, height),\r\n                label: label\r\n            });\r\n        });\r\n        return groundTruthBoxes.map(function (_a) {\r\n            var box = _a.box, label = _a.label;\r\n            var _b = box.rescale(_this.reshapedImgDims), left = _b.left, top = _b.top, bottom = _b.bottom, right = _b.right, x = _b.x, y = _b.y, width = _b.width, height = _b.height;\r\n            var ctX = left + (width / 2);\r\n            var ctY = top + (height / 2);\r\n            var col = Math.floor((ctX / _this.inputSize) * _this.numCells);\r\n            var row = Math.floor((ctY / _this.inputSize) * _this.numCells);\r\n            var anchorsByIou = _this.anchors.map(function (anchor, idx) { return ({\r\n                idx: idx,\r\n                iou: iou(new BoundingBox(0, 0, anchor.x * CELL_SIZE, anchor.y * CELL_SIZE), new BoundingBox(0, 0, width, height))\r\n            }); }).sort(function (a1, a2) { return a2.iou - a1.iou; });\r\n            var anchor = anchorsByIou[0].idx;\r\n            return { row: row, col: col, anchor: anchor, box: box, label: label };\r\n        });\r\n    };\r\n    TinyYolov2LossFunction.prototype.createGroundTruthMask = function () {\r\n        var _this = this;\r\n        var mask = tf.zeros([this.numCells, this.numCells, this.numBoxes, this.boxEncodingSize]);\r\n        var buf = mask.buffer();\r\n        this.groundTruth.forEach(function (_a) {\r\n            var row = _a.row, col = _a.col, anchor = _a.anchor;\r\n            for (var i = 0; i < _this.boxEncodingSize; i++) {\r\n                buf.set(1, row, col, anchor, i);\r\n            }\r\n        });\r\n        return mask;\r\n    };\r\n    TinyYolov2LossFunction.prototype.createCoordAndScoreMasks = function () {\r\n        var _this = this;\r\n        return tf.tidy(function () {\r\n            var coordBoxOffsetMask = tf.zeros([_this.numCells, _this.numCells, _this.numBoxes, _this.boxEncodingSize]);\r\n            var coordBoxSizeMask = tf.zeros([_this.numCells, _this.numCells, _this.numBoxes, _this.boxEncodingSize]);\r\n            var scoreMask = tf.zeros([_this.numCells, _this.numCells, _this.numBoxes, _this.boxEncodingSize]);\r\n            var coordBoxOffsetBuf = coordBoxOffsetMask.buffer();\r\n            var coordBoxSizeBuf = coordBoxSizeMask.buffer();\r\n            var scoreBuf = scoreMask.buffer();\r\n            for (var row = 0; row < _this.numCells; row++) {\r\n                for (var col = 0; col < _this.numCells; col++) {\r\n                    for (var anchor = 0; anchor < _this.numBoxes; anchor++) {\r\n                        coordBoxOffsetBuf.set(1, row, col, anchor, 0);\r\n                        coordBoxOffsetBuf.set(1, row, col, anchor, 1);\r\n                        coordBoxSizeBuf.set(1, row, col, anchor, 2);\r\n                        coordBoxSizeBuf.set(1, row, col, anchor, 3);\r\n                        scoreBuf.set(1, row, col, anchor, 4);\r\n                    }\r\n                }\r\n            }\r\n            return { coordBoxOffsetMask: coordBoxOffsetMask, coordBoxSizeMask: coordBoxSizeMask, scoreMask: scoreMask };\r\n        });\r\n    };\r\n    TinyYolov2LossFunction.prototype.createOneHotClassScoreMask = function () {\r\n        var mask = tf.zeros([this.numCells, this.numCells, this.numBoxes, this.boxEncodingSize]);\r\n        var buf = mask.buffer();\r\n        var classValuesOffset = 5;\r\n        this.groundTruth.forEach(function (_a) {\r\n            var row = _a.row, col = _a.col, anchor = _a.anchor, label = _a.label;\r\n            buf.set(1, row, col, anchor, classValuesOffset + label);\r\n        });\r\n        return mask;\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeIous = function () {\r\n        var _this = this;\r\n        var isSameAnchor = function (p1) { return function (p2) {\r\n            return p1.row === p2.row\r\n                && p1.col === p2.col\r\n                && p1.anchor === p2.anchor;\r\n        }; };\r\n        var ious = tf.zeros([this.numCells, this.numCells, this.gridCellEncodingSize]);\r\n        var buf = ious.buffer();\r\n        this.groundTruth.forEach(function (_a) {\r\n            var row = _a.row, col = _a.col, anchor = _a.anchor, box = _a.box;\r\n            var predBox = _this.predictedBoxes.find(isSameAnchor({ row: row, col: col, anchor: anchor }));\r\n            if (!predBox) {\r\n                throw new Error(\"no output box found for: row \" + row + \", col \" + col + \", anchor \" + anchor);\r\n            }\r\n            var boxIou = iou(box.rescale(_this.reshapedImgDims), predBox.box.rescale(_this.reshapedImgDims));\r\n            var anchorOffset = _this.boxEncodingSize * anchor;\r\n            var scoreValueOffset = 4;\r\n            buf.set(boxIou, row, col, anchorOffset + scoreValueOffset);\r\n        });\r\n        return ious;\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeCoordBoxOffsets = function () {\r\n        var _this = this;\r\n        var offsets = tf.zeros([this.numCells, this.numCells, this.numBoxes, this.boxEncodingSize]);\r\n        var buf = offsets.buffer();\r\n        this.groundTruth.forEach(function (_a) {\r\n            var row = _a.row, col = _a.col, anchor = _a.anchor, box = _a.box;\r\n            var _b = box.rescale(_this.reshapedImgDims), left = _b.left, top = _b.top, right = _b.right, bottom = _b.bottom;\r\n            var centerX = (left + right) / 2;\r\n            var centerY = (top + bottom) / 2;\r\n            var dCenterX = centerX - (col * CELL_SIZE);\r\n            var dCenterY = centerY - (row * CELL_SIZE);\r\n            // inverseSigmoid(0) === -Infinity, inverseSigmoid(1) === Infinity\r\n            //const dx = inverseSigmoid(Math.min(0.999, Math.max(0.001, dCenterX / CELL_SIZE)))\r\n            //const dy = inverseSigmoid(Math.min(0.999, Math.max(0.001, dCenterY / CELL_SIZE)))\r\n            var dx = dCenterX / CELL_SIZE;\r\n            var dy = dCenterY / CELL_SIZE;\r\n            buf.set(dx, row, col, anchor, 0);\r\n            buf.set(dy, row, col, anchor, 1);\r\n        });\r\n        return offsets;\r\n    };\r\n    TinyYolov2LossFunction.prototype.computeCoordBoxSizes = function () {\r\n        var _this = this;\r\n        var sizes = tf.zeros([this.numCells, this.numCells, this.numBoxes, this.boxEncodingSize]);\r\n        var buf = sizes.buffer();\r\n        this.groundTruth.forEach(function (_a) {\r\n            var row = _a.row, col = _a.col, anchor = _a.anchor, box = _a.box;\r\n            var _b = box.rescale(_this.reshapedImgDims), width = _b.width, height = _b.height;\r\n            var dw = Math.log(width / (_this.anchors[anchor].x * CELL_SIZE));\r\n            var dh = Math.log(height / (_this.anchors[anchor].y * CELL_SIZE));\r\n            buf.set(dw, row, col, anchor, 2);\r\n            buf.set(dh, row, col, anchor, 3);\r\n        });\r\n        return sizes;\r\n    };\r\n    return TinyYolov2LossFunction;\r\n}());\r\nexport { TinyYolov2LossFunction };\r\n//# sourceMappingURL=TinyYolov2LossFunction.js.map"]},"metadata":{},"sourceType":"module"}