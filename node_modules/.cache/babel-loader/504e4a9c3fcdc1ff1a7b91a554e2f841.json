{"ast":null,"code":"import api from \"./api\";\n/**\r\n * @param {String} endpoint relative endpoint\r\n * @param {object} body request body\r\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default GET\r\n * @param {boolean} transformBody whether to transform the request body from JSON to FormData | Default false\r\n */\n\nexport async function queryApi(endpoint, body = null, method = \"GET\", transformBody = false) {\n  let error = null;\n  let result = null;\n\n  try {\n    //Create our config, with the method as the method passed and the new endpoint\n    let config = {\n      method,\n      url: `${process.env.REACT_APP_API_URL}/${endpoint}`\n    };\n\n    if (body) {\n      // If we have a body and the method is GET, the config is the following\n      if (method.toUpperCase() === \"GET\") config = { ...config,\n        headers: {\n          \"Content-Type\": \"appliation/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n        },\n        data: body\n      };\n\n      if ([\"POST\", \"PUT\", \"OPTIONS\", \"PATCH\"].includes(method.toUpperCase())) {\n        if (transformBody) {\n          // If our method is POST, PUT or PATCH, and we have to transform our body to Form Data (for files upload for example)\n          // transform body object to form data entries\n          let bodyFormData = new FormData();\n\n          for (let [key, value] of Object.entries(body)) {\n            if (value) {\n              if (Array.isArray(value)) value.forEach(v => bodyFormData.append(key, v));else bodyFormData.append(key, value);\n            }\n          } // Change the config to the following\n\n\n          config = { ...config,\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\n              \"Content-Type\": \"multipart/form-data\"\n            },\n            data: bodyFormData\n          };\n        } else {\n          // If not keep the content type json and the body will be parsed automatically to json\n          config = { ...config,\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\n              \"Content-Type\": \"application/json\"\n            },\n            data: body\n          };\n        }\n      }\n    } else {\n      if (method.toUpperCase() === \"GET\") config = { ...config,\n        headers: {\n          \"Content-Type\": \"appliation/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n        }\n      };\n    } // Setting authorization token if available with each request\n    // This example uses localStorage, feel free to change it to cookie storage or something else.\n    // const token = localStorage.getItem(\"token\");\n    // if (token)\n    //   config.headers = { ...config.headers, Authorization: `Bearer ${token}` };\n    // console.log(`Requesting : ${config.url}`)\n    // console.log(config)\n\n\n    const res = await api(config);\n    result = res.data;\n  } catch (e) {\n    // To differentiate between validation errors and response errors,\n    // check whether the \"errors\" key is defined or not in the returned error from this function.\n    if (e.response) {\n      // The request was made and the server responded with a status code that falls out of the range of 2xx\n      error = e.response.data; //   console.log(e.message);\n      //   console.log(error);\n    } else {\n      // 1) The request was made but no response was received\n      // OR\n      // 2) Something went wrong in setting up the request that triggered an Error\n      //   console.log(e.request);\n      //   console.log(e.message);\n      error = e.message;\n    }\n  }\n\n  return [result, error];\n}","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/utils/queryApi.js"],"names":["api","queryApi","endpoint","body","method","transformBody","error","result","config","url","process","env","REACT_APP_API_URL","toUpperCase","headers","Authorization","localStorage","getItem","data","includes","bodyFormData","FormData","key","value","Object","entries","Array","isArray","forEach","v","append","res","e","response","message"],"mappings":"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","sourcesContent":["import api from \"./api\";\r\n\r\n/**\r\n * @param {String} endpoint relative endpoint\r\n * @param {object} body request body\r\n * @param {String} method method can be [\"GET\",\"POST\",\"PUT\", \"DELETE\"] | Default GET\r\n * @param {boolean} transformBody whether to transform the request body from JSON to FormData | Default false\r\n */\r\nexport async function queryApi(endpoint,body = null,method = \"GET\",transformBody = false) {\r\n  let error = null;\r\n  let result = null;\r\n  try {\r\n    //Create our config, with the method as the method passed and the new endpoint\r\n    let config = {\r\n      method,\r\n      url: `${process.env.REACT_APP_API_URL}/${endpoint}`,\r\n    };\r\n    if (body) {\r\n      // If we have a body and the method is GET, the config is the following\r\n      if (method.toUpperCase() === \"GET\")\r\n        config = {\r\n          ...config,\r\n\r\n          headers: {  \"Content-Type\":\"appliation/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`},\r\n          data: body,\r\n        };\r\n\r\n      if ([\"POST\", \"PUT\",\"OPTIONS\", \"PATCH\"].includes(method.toUpperCase())) {\r\n        if (transformBody) {\r\n          // If our method is POST, PUT or PATCH, and we have to transform our body to Form Data (for files upload for example)\r\n          // transform body object to form data entries\r\n          let bodyFormData = new FormData();\r\n          for (let [key, value] of Object.entries(body)) {\r\n            if (value) {\r\n              if (Array.isArray(value))\r\n                value.forEach((v) => bodyFormData.append(key, v));\r\n              else bodyFormData.append(key, value);\r\n            }\r\n          }\r\n          // Change the config to the following\r\n          config = {\r\n            ...config,\r\n            headers: { Authorization: `Bearer ${localStorage.getItem(\"authToken\")}` , \"Content-Type\": \"multipart/form-data\" },\r\n          \r\n            data: bodyFormData,\r\n          };\r\n        } else {\r\n          // If not keep the content type json and the body will be parsed automatically to json\r\n          config = {\r\n            ...config,\r\n            headers: {Authorization: `Bearer ${localStorage.getItem(\"authToken\")}` ,  \"Content-Type\": \"application/json\" },\r\n            data: body,\r\n          };\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n\r\n    else\r\n    { if (method.toUpperCase() === \"GET\")\r\n    config = {\r\n      ...config,\r\n\r\n      headers: {  \"Content-Type\":\"appliation/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`}\r\n     \r\n    };\r\n\r\n    }\r\n\r\n    // Setting authorization token if available with each request\r\n    // This example uses localStorage, feel free to change it to cookie storage or something else.\r\n\r\n    // const token = localStorage.getItem(\"token\");\r\n    // if (token)\r\n    //   config.headers = { ...config.headers, Authorization: `Bearer ${token}` };\r\n\r\n    // console.log(`Requesting : ${config.url}`)\r\n    // console.log(config)\r\n\r\n    const res = await api(config);\r\n    result = res.data;\r\n  } catch (e) {\r\n    // To differentiate between validation errors and response errors,\r\n    // check whether the \"errors\" key is defined or not in the returned error from this function.\r\n\r\n    if (e.response) {\r\n      // The request was made and the server responded with a status code that falls out of the range of 2xx\r\n      error = e.response.data;\r\n      //   console.log(e.message);\r\n      //   console.log(error);\r\n    } else {\r\n      // 1) The request was made but no response was received\r\n      // OR\r\n      // 2) Something went wrong in setting up the request that triggered an Error\r\n\r\n      //   console.log(e.request);\r\n      //   console.log(e.message);\r\n      error = e.message;\r\n    }\r\n  }\r\n  return [result, error];\r\n}"]},"metadata":{},"sourceType":"module"}