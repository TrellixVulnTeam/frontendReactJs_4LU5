{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { TinyYolov2Options } from 'tfjs-tiny-yolov2';\nimport { MtcnnOptions } from '../mtcnn/MtcnnOptions';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1';\nimport { detectAllFaces } from './detectFaces'; // export allFaces API for backward compatibility\n\nexport function allFacesSsdMobilenetv1(input, minConfidence) {\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , detectAllFaces(input, new SsdMobilenetv1Options(minConfidence ? {\n            minConfidence: minConfidence\n          } : {})).withFaceLandmarks().withFaceDescriptors()];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\nexport function allFacesTinyYolov2(input, forwardParams) {\n  if (forwardParams === void 0) {\n    forwardParams = {};\n  }\n\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , detectAllFaces(input, new TinyYolov2Options(forwardParams)).withFaceLandmarks().withFaceDescriptors()];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\nexport function allFacesMtcnn(input, forwardParams) {\n  if (forwardParams === void 0) {\n    forwardParams = {};\n  }\n\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , detectAllFaces(input, new MtcnnOptions(forwardParams)).withFaceLandmarks().withFaceDescriptors()];\n\n        case 1:\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}\nexport var allFaces = allFacesSsdMobilenetv1;","map":{"version":3,"sources":["../../../src/globalApi/allFaces.ts"],"names":[],"mappings":";AACA,SAA6B,iBAA7B,QAAsD,kBAAtD;AAGA,SAAwB,YAAxB,QAA4C,uBAA5C;AACA,SAAS,qBAAT,QAAsC,mBAAtC;AACA,SAAS,cAAT,QAA+B,eAA/B,C,CAEA;;AAEA,OAAM,SAAA,sBAAA,CACJ,KADI,EAEJ,aAFI,EAEkB;;;;;AAEf,iBAAA,CAAA;AAAA;AAAA,YAAM,cAAc,CAAC,KAAD,EAAQ,IAAI,qBAAJ,CAA0B,aAAa,GAAG;AAAE,YAAA,aAAa,EAAA;AAAf,WAAH,GAAuB,EAA9D,CAAR,CAAd,CACV,iBADU,GAEV,mBAFU,EAAN,CAAA;;;AAAP,iBAAA,CAAA;AAAA;AAAA,YAAO,EAAA,CAAA,IAAA,EAAP,CAAA;;;;AAGD;AAED,OAAM,SAAA,kBAAA,CACJ,KADI,EAEJ,aAFI,EAEkC;AAAtC,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,EAAA;AAAsC;;;;;;AAE/B,iBAAA,CAAA;AAAA;AAAA,YAAM,cAAc,CAAC,KAAD,EAAQ,IAAI,iBAAJ,CAAsB,aAAtB,CAAR,CAAd,CACV,iBADU,GAEV,mBAFU,EAAN,CAAA;;;AAAP,iBAAA,CAAA;AAAA;AAAA,YAAO,EAAA,CAAA,IAAA,EAAP,CAAA;;;;AAGD;AAED,OAAM,SAAA,aAAA,CACJ,KADI,EAEJ,aAFI,EAE6B;AAAjC,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,EAAA;AAAiC;;;;;;AAE1B,iBAAA,CAAA;AAAA;AAAA,YAAM,cAAc,CAAC,KAAD,EAAQ,IAAI,YAAJ,CAAiB,aAAjB,CAAR,CAAd,CACV,iBADU,GAEV,mBAFU,EAAN,CAAA;;;AAAP,iBAAA,CAAA;AAAA;AAAA,YAAO,EAAA,CAAA,IAAA,EAAP,CAAA;;;;AAGD;AAED,OAAO,IAAM,QAAQ,GAAG,sBAAjB","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\r\nimport { TinyYolov2Options } from 'tfjs-tiny-yolov2';\r\nimport { MtcnnOptions } from '../mtcnn/MtcnnOptions';\r\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1';\r\nimport { detectAllFaces } from './detectFaces';\r\n// export allFaces API for backward compatibility\r\nexport function allFacesSsdMobilenetv1(input, minConfidence) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, detectAllFaces(input, new SsdMobilenetv1Options(minConfidence ? { minConfidence: minConfidence } : {}))\r\n                        .withFaceLandmarks()\r\n                        .withFaceDescriptors()];\r\n                case 1: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function allFacesTinyYolov2(input, forwardParams) {\r\n    if (forwardParams === void 0) { forwardParams = {}; }\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, detectAllFaces(input, new TinyYolov2Options(forwardParams))\r\n                        .withFaceLandmarks()\r\n                        .withFaceDescriptors()];\r\n                case 1: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport function allFacesMtcnn(input, forwardParams) {\r\n    if (forwardParams === void 0) { forwardParams = {}; }\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, detectAllFaces(input, new MtcnnOptions(forwardParams))\r\n                        .withFaceLandmarks()\r\n                        .withFaceDescriptors()];\r\n                case 1: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    });\r\n}\r\nexport var allFaces = allFacesSsdMobilenetv1;\r\n//# sourceMappingURL=allFaces.js.map"]},"metadata":{},"sourceType":"module"}