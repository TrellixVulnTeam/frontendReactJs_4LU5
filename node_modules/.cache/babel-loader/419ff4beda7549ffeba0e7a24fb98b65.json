{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { queryApi } from \"../../utils/queryApi\";\nvar initialState = {\n  groups: [],\n  selectedGroup: {},\n  errors: \"\"\n};\nvar groupsSlice = createSlice({\n  name: \"groups\",\n  initialState: initialState,\n  reducers: {\n    populateGroups: function populateGroups(state, action) {\n      state.groups = action.payload;\n    },\n    selectGroup: function selectGroup(state, action) {\n      state.populateGroups = action.payload;\n    },\n    addGroup: function addGroup(state, action) {\n      var payload = action.payload;\n      state.groups.push(payload);\n    },\n    deleteGroup: function deleteGroup(state, action) {\n      var payload = action.payload;\n      var index = state.groups.findIndex(function (group) {\n        return group._id === payload;\n      });\n\n      if (index !== -1) {\n        state.groups.splice(index, 1);\n      }\n    },\n    searchgroup: function searchgroup(state, action) {\n      state.groups = action.payload;\n    },\n    setErrors: function setErrors(state, action) {\n      state.errors = action.payload;\n    }\n  }\n});\nexport var fetchGroups = function fetchGroups() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var _yield$queryApi, _yield$queryApi2, res, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return queryApi(\"groups\");\n\n            case 2:\n              _yield$queryApi = _context.sent;\n              _yield$queryApi2 = _slicedToArray(_yield$queryApi, 2);\n              res = _yield$queryApi2[0];\n              error = _yield$queryApi2[1];\n\n              if (error) {\n                console.log(error);\n              } else {\n                dispatch(populateGroups(res));\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var searchgroupbyName = function searchgroupbyName(Name) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var _yield$queryApi3, _yield$queryApi4, res, error;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return queryApi(\"groups/search/\" + Name);\n\n            case 2:\n              _yield$queryApi3 = _context2.sent;\n              _yield$queryApi4 = _slicedToArray(_yield$queryApi3, 2);\n              res = _yield$queryApi4[0];\n              error = _yield$queryApi4[1];\n\n              if (error) {\n                console.log(error);\n              } else {\n                dispatch(searchgroup(res));\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var selectGroups = function selectGroups(state) {\n  return [state.groups.groups, state.groups.errors];\n};\nvar _groupsSlice$actions = groupsSlice.actions,\n    populateGroups = _groupsSlice$actions.populateGroups,\n    selectGroup = _groupsSlice$actions.selectGroup,\n    addGroup = _groupsSlice$actions.addGroup,\n    searchgroup = _groupsSlice$actions.searchgroup,\n    deleteGroup = _groupsSlice$actions.deleteGroup,\n    setErrors = _groupsSlice$actions.setErrors;\nexport { populateGroups, selectGroup, addGroup, searchgroup, deleteGroup, setErrors };\nexport default groupsSlice.reducer;","map":{"version":3,"sources":["C:/Users/chaki/OneDrive/Desktop/aymenouerghui/frontendReactJs/src/redux/slices/groupsSlice.js"],"names":["createSlice","queryApi","initialState","groups","selectedGroup","errors","groupsSlice","name","reducers","populateGroups","state","action","payload","selectGroup","addGroup","push","deleteGroup","index","findIndex","group","_id","splice","searchgroup","setErrors","fetchGroups","dispatch","res","error","console","log","searchgroupbyName","Name","selectGroups","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { queryApi } from \"../../utils/queryApi\";\r\nlet initialState = {\r\n    groups: [],\r\n    selectedGroup: {},\r\n    errors: \"\",\r\n    };\r\nconst groupsSlice=createSlice({\r\n    name: \"groups\",\r\n    initialState,\r\n    reducers: {\r\n        populateGroups(state, action) {\r\n        state.groups = action.payload;\r\n        },\r\n        selectGroup(state, action) {\r\n            state.populateGroups = action.payload;\r\n            },\r\n        addGroup: (state, action) => {\r\n            const payload = action.payload;\r\n            state.groups.push(payload);\r\n            },\r\n        deleteGroup: (state, action) => {\r\n            const payload = action.payload;\r\n            const index = state.groups.findIndex((group) => group._id === payload);\r\n            if (index !== -1) {\r\n                state.groups.splice(index, 1);\r\n                               }\r\n       },\r\n\r\n       searchgroup :(state, action)=>{\r\n        state.groups = action.payload;\r\n        \r\n        },\r\n    \r\n         setErrors(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n\r\nexport const fetchGroups=()=>async(dispatch)=>{\r\n    const [res,error]=await queryApi(\"groups\");\r\n    if(error){\r\n        console.log(error);\r\n    }\r\n    else{\r\n        dispatch(populateGroups(res));\r\n    }\r\n}\r\n\r\nexport const searchgroupbyName=(Name)=>async(dispatch)=>{\r\n    const [res,error]=await queryApi(\"groups/search/\"+Name);\r\n   \r\n    if(error){\r\n        console.log(error);\r\n    }\r\n    else{\r\n      dispatch(searchgroup(res));\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const selectGroups=(state)=>{\r\n    return [state.groups.groups,state.groups.errors];\r\n}\r\nexport const {populateGroups,selectGroup,addGroup,searchgroup,deleteGroup,setErrors}=groupsSlice.actions;\r\nexport default groupsSlice.reducer;"]},"metadata":{},"sourceType":"module"}