{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nlet initialState = {\n  mypages: [],\n  selectedMyPage: {},\n  errors: \"\"\n};\nconst mypagesSlice = createSlice({\n  name: \"mypages\",\n  initialState,\n  reducers: {\n    populateMyPages(state, action) {\n      state.mypages = action.payload;\n    },\n\n    selectMyPage(state, action) {\n      state.populateMyPages = action.payload;\n    },\n\n    addMyPage: (state, action) => {\n      const payload = action.payload;\n      state.mypages.push(payload);\n    },\n    deleteMyPage: (state, action) => {\n      const payload = action.payload;\n      const index = state.mypages.findIndex(page => page._id === payload);\n\n      if (index !== -1) {\n        state.mypages.splice(index, 1);\n      }\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    }\n\n  }\n});\nexport const fetchMyPages = () => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"appliation/json\",\n      Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\n    }\n  };\n  axios.get(`/page/getMyPages`, config).then(response => {\n    dispatch(populateMyPages(response.data));\n    console.log(response.data);\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const selectMyPages = state => {\n  return [state.mypages.mypages, state.mypages.errors];\n};\nexport const {\n  populateMyPages,\n  addMyPage,\n  setErrors,\n  deleteMyPage,\n  selectMyPage\n} = mypagesSlice.actions;\nexport default mypagesSlice.reducer;","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/redux/slices/mypagesSlice.js"],"names":["createSlice","axios","initialState","mypages","selectedMyPage","errors","mypagesSlice","name","reducers","populateMyPages","state","action","payload","selectMyPage","addMyPage","push","deleteMyPage","index","findIndex","page","_id","splice","setErrors","fetchMyPages","dispatch","config","headers","Authorization","localStorage","getItem","get","then","response","data","console","log","catch","error","selectMyPages","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAIC,YAAY,GAAG;AACfC,EAAAA,OAAO,EAAE,EADM;AAEfC,EAAAA,cAAc,EAAE,EAFD;AAGfC,EAAAA,MAAM,EAAE;AAHO,CAAnB;AAKA,MAAMC,YAAY,GAACN,WAAW,CAAC;AAC3BO,EAAAA,IAAI,EAAE,SADqB;AAE3BL,EAAAA,YAF2B;AAG3BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC/BD,MAAAA,KAAK,CAACP,OAAN,GAAgBQ,MAAM,CAACC,OAAvB;AACC,KAHK;;AAINC,IAAAA,YAAY,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACD,eAAN,GAAwBE,MAAM,CAACC,OAA/B;AACC,KANC;;AAONE,IAAAA,SAAS,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACAF,MAAAA,KAAK,CAACP,OAAN,CAAcY,IAAd,CAAmBH,OAAnB;AACC,KAVC;AAWNI,IAAAA,YAAY,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC7B,YAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACA,YAAMK,KAAK,GAAGP,KAAK,CAACP,OAAN,CAAce,SAAd,CAAyBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaR,OAA/C,CAAd;;AACA,UAAIK,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdP,QAAAA,KAAK,CAACP,OAAN,CAAckB,MAAd,CAAqBJ,KAArB,EAA4B,CAA5B;AACgB;AACxB,KAjBM;;AAoBLK,IAAAA,SAAS,CAACZ,KAAD,EAAQC,MAAR,EAAgB;AACjBD,MAAAA,KAAK,CAACL,MAAN,GAAeM,MAAM,CAACC,OAAtB;AACN;;AAtBG;AAHiB,CAAD,CAA9B;AAgCA,OAAO,MAAMW,YAAY,GAAC,MAAI,MAAMC,QAAN,IAAiB;AAC3C,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAe,iBADV;AAELC,MAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkC;AAFtD;AADE,GAAf;AAMA5B,EAAAA,KAAK,CAAC6B,GAAN,CAAW,kBAAX,EAA8BL,MAA9B,EACaM,IADb,CACmBC,QAAD,IAAc;AACnBR,IAAAA,QAAQ,CAACf,eAAe,CAACuB,QAAQ,CAACC,IAAV,CAAhB,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,IAArB;AACA,GAJb,EAKaG,KALb,CAKoBC,KAAD,IAAW;AAChBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,GAPb;AAQH,CAfM;AAqBP,OAAO,MAAMC,aAAa,GAAE5B,KAAD,IAAS;AAChC,SAAO,CAACA,KAAK,CAACP,OAAN,CAAcA,OAAf,EAAuBO,KAAK,CAACP,OAAN,CAAcE,MAArC,CAAP;AACH,CAFM;AAGP,OAAO,MAAM;AAACI,EAAAA,eAAD;AAAiBK,EAAAA,SAAjB;AAA2BQ,EAAAA,SAA3B;AAAqCN,EAAAA,YAArC;AAAkDH,EAAAA;AAAlD,IAAgEP,YAAY,CAACiC,OAAnF;AACP,eAAejC,YAAY,CAACkC,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\nlet initialState = {\r\n    mypages: [],\r\n    selectedMyPage: {},\r\n    errors: \"\",\r\n    };\r\nconst mypagesSlice=createSlice({\r\n    name: \"mypages\",\r\n    initialState,\r\n    reducers: {\r\n        populateMyPages(state, action) {\r\n        state.mypages = action.payload;\r\n        },\r\n        selectMyPage(state, action) {\r\n            state.populateMyPages = action.payload;\r\n            },\r\n        addMyPage: (state, action) => {\r\n            const payload = action.payload;\r\n            state.mypages.push(payload);\r\n            },\r\n        deleteMyPage: (state, action) => {\r\n            const payload = action.payload;\r\n            const index = state.mypages.findIndex((page) => page._id === payload);\r\n            if (index !== -1) {\r\n                state.mypages.splice(index, 1);\r\n                               }\r\n       },\r\n      \r\n    \r\n         setErrors(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n        \r\n\r\nexport const fetchMyPages=()=>async(dispatch)=>{\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"appliation/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`\r\n        }\r\n    }\r\n    axios.get(`/page/getMyPages`, config)\r\n                .then((response) => {\r\n                 dispatch(populateMyPages(response.data));\r\n                 console.log(response.data)\r\n                })\r\n                .catch((error) => {\r\n                  console.log(error)\r\n                })\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const selectMyPages=(state)=>{\r\n    return [state.mypages.mypages,state.mypages.errors];\r\n}\r\nexport const {populateMyPages,addMyPage,setErrors,deleteMyPage,selectMyPage}=mypagesSlice.actions;\r\nexport default mypagesSlice.reducer;"]},"metadata":{},"sourceType":"module"}