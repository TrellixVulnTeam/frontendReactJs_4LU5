{"ast":null,"code":"import { drawText, env, getContext2dOrThrow, getDefaultDrawOptions, resolveInput, round } from 'tfjs-image-recognition-base';\nexport function drawFaceExpressions(canvasArg, faceExpressions, options) {\n  var canvas = resolveInput(canvasArg);\n\n  if (!(canvas instanceof env.getEnv().Canvas)) {\n    throw new Error('drawFaceExpressions - expected canvas to be of type: HTMLCanvasElement');\n  }\n\n  var drawOptions = Object.assign(getDefaultDrawOptions(options), options || {});\n  var ctx = getContext2dOrThrow(canvas);\n  var _a = drawOptions.primaryColor,\n      primaryColor = _a === void 0 ? 'red' : _a,\n      _b = drawOptions.secondaryColor,\n      secondaryColor = _b === void 0 ? 'blue' : _b,\n      _c = drawOptions.primaryFontSize,\n      primaryFontSize = _c === void 0 ? 22 : _c,\n      _d = drawOptions.secondaryFontSize,\n      secondaryFontSize = _d === void 0 ? 16 : _d,\n      _e = drawOptions.minConfidence,\n      minConfidence = _e === void 0 ? 0.2 : _e;\n  var faceExpressionsArray = Array.isArray(faceExpressions) ? faceExpressions : [faceExpressions];\n  faceExpressionsArray.forEach(function (_a) {\n    var position = _a.position,\n        expressions = _a.expressions;\n    var x = position.x,\n        y = position.y;\n    var height = position.height || 0;\n    var sorted = expressions.sort(function (a, b) {\n      return b.probability - a.probability;\n    });\n    var resultsToDisplay = sorted.filter(function (expr) {\n      return expr.probability > minConfidence;\n    });\n    var offset = y + height + resultsToDisplay.length * primaryFontSize > canvas.height ? -(resultsToDisplay.length * primaryFontSize) : 0;\n    resultsToDisplay.forEach(function (expr, i) {\n      var text = expr.expression + \" (\" + round(expr.probability) + \")\";\n      drawText(ctx, x, y + height + i * primaryFontSize + offset, text, {\n        textColor: i === 0 ? primaryColor : secondaryColor,\n        fontSize: i === 0 ? primaryFontSize : secondaryFontSize\n      });\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/dom/drawFaceExpressions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { drawText, env, getContext2dOrThrow, getDefaultDrawOptions, resolveInput, round } from 'tfjs-image-recognition-base';\r\nexport function drawFaceExpressions(canvasArg, faceExpressions, options) {\r\n    var canvas = resolveInput(canvasArg);\r\n    if (!(canvas instanceof env.getEnv().Canvas)) {\r\n        throw new Error('drawFaceExpressions - expected canvas to be of type: HTMLCanvasElement');\r\n    }\r\n    var drawOptions = Object.assign(getDefaultDrawOptions(options), (options || {}));\r\n    var ctx = getContext2dOrThrow(canvas);\r\n    var _a = drawOptions.primaryColor, primaryColor = _a === void 0 ? 'red' : _a, _b = drawOptions.secondaryColor, secondaryColor = _b === void 0 ? 'blue' : _b, _c = drawOptions.primaryFontSize, primaryFontSize = _c === void 0 ? 22 : _c, _d = drawOptions.secondaryFontSize, secondaryFontSize = _d === void 0 ? 16 : _d, _e = drawOptions.minConfidence, minConfidence = _e === void 0 ? 0.2 : _e;\r\n    var faceExpressionsArray = Array.isArray(faceExpressions)\r\n        ? faceExpressions\r\n        : [faceExpressions];\r\n    faceExpressionsArray.forEach(function (_a) {\r\n        var position = _a.position, expressions = _a.expressions;\r\n        var x = position.x, y = position.y;\r\n        var height = position.height || 0;\r\n        var sorted = expressions.sort(function (a, b) { return b.probability - a.probability; });\r\n        var resultsToDisplay = sorted.filter(function (expr) { return expr.probability > minConfidence; });\r\n        var offset = (y + height + resultsToDisplay.length * primaryFontSize) > canvas.height\r\n            ? -(resultsToDisplay.length * primaryFontSize)\r\n            : 0;\r\n        resultsToDisplay.forEach(function (expr, i) {\r\n            var text = expr.expression + \" (\" + round(expr.probability) + \")\";\r\n            drawText(ctx, x, y + height + (i * primaryFontSize) + offset, text, {\r\n                textColor: i === 0 ? primaryColor : secondaryColor,\r\n                fontSize: i === 0 ? primaryFontSize : secondaryFontSize\r\n            });\r\n        });\r\n    });\r\n}\r\n//# sourceMappingURL=drawFaceExpressions.js.map"]},"metadata":{},"sourceType":"module"}