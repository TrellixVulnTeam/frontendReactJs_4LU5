{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { queryApi } from \"../../utils/queryApi\";\nlet initialState = {\n  usercourse: [],\n  selectedUsercourse: [],\n  errors: \"\"\n};\nconst usercoursesSlice = createSlice({\n  name: \"usercourse\",\n  initialState,\n  reducers: {\n    populateUsercourse(state, action) {\n      state.usercourse = action.payload;\n    },\n\n    deleteUsercourse: (state, action) => {\n      const payload = action.payload;\n      const index = state.usercourse.findIndex(uc => uc._id === payload);\n\n      if (index !== -1) {\n        console.log(index);\n        state.usercourse.splice(index, 1);\n      }\n    },\n    sortusercoursesasc: (state, action) => {\n      state.usercourse = action.payload;\n    },\n\n    setErrors(state, action) {\n      state.errors = action.payload;\n    }\n\n  }\n});\nexport const fetchUserCourse = id => async dispatch => {\n  const [res, error] = await queryApi(\"usercourse/findusers/\" + id);\n\n  if (error) {\n    console.log(error);\n  } else {\n    dispatch(populateUsercourse(res));\n  }\n};\nexport const fsortuserasc = id => async dispatch => {\n  const [res, error] = await queryApi(\"usercourse/finduserstriAsc/\" + id);\n\n  if (error) {\n    console.log(error);\n  } else {\n    dispatch(sortusercoursesasc(res));\n  }\n};\nexport const selectUsercourses = state => {\n  return [state.usercourse.usercourse, state.usercourse.errors];\n};\nexport const {\n  populateUsercourse,\n  deleteUsercourse,\n  sortusercoursesasc\n} = usercoursesSlice.actions;\nexport default usercoursesSlice.reducer;","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/redux/slices/usercourseSlice.js"],"names":["createSlice","queryApi","initialState","usercourse","selectedUsercourse","errors","usercoursesSlice","name","reducers","populateUsercourse","state","action","payload","deleteUsercourse","index","findIndex","uc","_id","console","log","splice","sortusercoursesasc","setErrors","fetchUserCourse","id","dispatch","res","error","fsortuserasc","selectUsercourses","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,IAAIC,YAAY,GAAG;AACfC,EAAAA,UAAU,EAAE,EADG;AAEfC,EAAAA,kBAAkB,EAAC,EAFJ;AAGfC,EAAAA,MAAM,EAAE;AAHO,CAAnB;AAKA,MAAMC,gBAAgB,GAACN,WAAW,CAAC;AAC/BO,EAAAA,IAAI,EAAE,YADyB;AAE/BL,EAAAA,YAF+B;AAG/BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,kBAAkB,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAElCD,MAAAA,KAAK,CAACP,UAAN,GAAmBQ,MAAM,CAACC,OAA1B;AACC,KAJK;;AAQNC,IAAAA,gBAAgB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAEjC,YAAMC,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACA,YAAME,KAAK,GAAGJ,KAAK,CAACP,UAAN,CAAiBY,SAAjB,CAA4BC,EAAD,IAAQA,EAAE,CAACC,GAAH,KAAWL,OAA9C,CAAd;;AACA,UAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdI,QAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACAJ,QAAAA,KAAK,CAACP,UAAN,CAAiBiB,MAAjB,CAAwBN,KAAxB,EAA+B,CAA/B;AACgB;AACxB,KAhBM;AAiBPO,IAAAA,kBAAkB,EAAC,CAACX,KAAD,EAAOC,MAAP,KAAgB;AAElCD,MAAAA,KAAK,CAACP,UAAN,GAAmBQ,MAAM,CAACC,OAA1B;AACA,KApBM;;AAsBLU,IAAAA,SAAS,CAACZ,KAAD,EAAQC,MAAR,EAAgB;AACjBD,MAAAA,KAAK,CAACL,MAAN,GAAeM,MAAM,CAACC,OAAtB;AACN;;AAxBG;AAHqB,CAAD,CAAlC;AAiCA,OAAO,MAAMW,eAAe,GAAEC,EAAD,IAAM,MAAMC,QAAN,IAAiB;AAChD,QAAM,CAACC,GAAD,EAAKC,KAAL,IAAY,MAAM1B,QAAQ,CAAC,0BAAwBuB,EAAzB,CAAhC;;AACA,MAAGG,KAAH,EAAS;AACLT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH,GAFD,MAGI;AACAF,IAAAA,QAAQ,CAAChB,kBAAkB,CAACiB,GAAD,CAAnB,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAME,YAAY,GAAEJ,EAAD,IAAM,MAAMC,QAAN,IAAiB;AAC7C,QAAM,CAACC,GAAD,EAAKC,KAAL,IAAY,MAAM1B,QAAQ,CAAC,gCAA8BuB,EAA/B,CAAhC;;AACA,MAAGG,KAAH,EAAS;AACLT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH,GAFD,MAGI;AACAF,IAAAA,QAAQ,CAACJ,kBAAkB,CAACK,GAAD,CAAnB,CAAR;AACH;AACJ,CARM;AAWP,OAAO,MAAMG,iBAAiB,GAAEnB,KAAD,IAAS;AACpC,SAAO,CAACA,KAAK,CAACP,UAAN,CAAiBA,UAAlB,EAA6BO,KAAK,CAACP,UAAN,CAAiBE,MAA9C,CAAP;AACH,CAFM;AAGP,OAAO,MAAM;AAACI,EAAAA,kBAAD;AAAoBI,EAAAA,gBAApB;AAAqCQ,EAAAA;AAArC,IAAyDf,gBAAgB,CAACwB,OAAhF;AACP,eAAexB,gBAAgB,CAACyB,OAAhC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { queryApi } from \"../../utils/queryApi\";\r\nlet initialState = {\r\n    usercourse: [],\r\n    selectedUsercourse:[],\r\n    errors: \"\",\r\n    };\r\nconst usercoursesSlice=createSlice({\r\n    name: \"usercourse\",\r\n    initialState,\r\n    reducers: {\r\n        populateUsercourse(state, action) {\r\n     \r\n        state.usercourse = action.payload;\r\n        },\r\n   \r\n     \r\n    \r\n        deleteUsercourse: (state, action) => {\r\n           \r\n            const payload = action.payload;\r\n            const index = state.usercourse.findIndex((uc) => uc._id === payload);\r\n            if (index !== -1) {\r\n                console.log(index);\r\n                state.usercourse.splice(index, 1);\r\n                               }\r\n       }, \r\n       sortusercoursesasc:(state,action)=>{\r\n       \r\n        state.usercourse = action.payload;\r\n       },\r\n     \r\n         setErrors(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n\r\nexport const fetchUserCourse=(id)=>async(dispatch)=>{\r\n    const [res,error]=await queryApi(\"usercourse/findusers/\"+id);\r\n    if(error){\r\n        console.log(error);\r\n    }\r\n    else{\r\n        dispatch(populateUsercourse(res));\r\n    }\r\n}\r\n\r\nexport const fsortuserasc=(id)=>async(dispatch)=>{\r\n    const [res,error]=await queryApi(\"usercourse/finduserstriAsc/\"+id);\r\n    if(error){\r\n        console.log(error);\r\n    }\r\n    else{\r\n        dispatch(sortusercoursesasc(res));\r\n    }\r\n}\r\n\r\n\r\nexport const selectUsercourses=(state)=>{\r\n    return [state.usercourse.usercourse,state.usercourse.errors];\r\n}\r\nexport const {populateUsercourse,deleteUsercourse,sortusercoursesasc}=usercoursesSlice.actions;\r\nexport default usercoursesSlice.reducer;"]},"metadata":{},"sourceType":"module"}