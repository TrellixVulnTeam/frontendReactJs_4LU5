{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { queryApi } from \"../../utils/queryApi\";\nlet initialState = {\n  reviews: [],\n  selectedReview: {},\n  numberrating: 0,\n  errors: \"\"\n};\nconst reviewcourseSlice = createSlice({\n  name: \"reviewscourse\",\n  initialState,\n  reducers: {\n    populateReviews(state, action) {\n      state.reviewscourse = action.payload;\n    },\n\n    populatesumreviews(state, action) {\n      state.numberrating = action.payload;\n    },\n\n    addReview: (state, action) => {\n      const payload = action.payload;\n      state.reviewscourse.push(payload);\n    },\n    deleteReview: (state, action) => {\n      const payload = action.payload;\n      const index = state.reviewscourse.findIndex(review => review._id === payload);\n\n      if (index !== -1) {\n        state.reviewscourse.splice(index, 1);\n      }\n    },\n\n    setErrorsR(state, action) {\n      state.errors = action.payload;\n    }\n\n  }\n});\nexport const fetchReviews = idc => async dispatch => {\n  const [res, error] = await queryApi(\"reviewc/\" + idc);\n\n  if (error) {\n    console.log(error);\n  } else {\n    dispatch(populateReviews(res));\n  }\n};\nexport const fetchsumrating = idc => async dispatch => {\n  const [res, error] = await queryApi(\"reviewc/average/\" + idc);\n\n  if (error) {\n    console.log(error);\n  } else {\n    dispatch(populatesumreviews(res));\n  }\n};\nexport const selectReviewsCourse = state => {\n  return [state.reviewscourse.reviewscourse, state.reviewscourse.errors];\n};\nexport const selectsumreviews = state => {\n  return [state.reviewscourse.numberrating, state.reviewscourse.errors];\n};\nexport const {\n  populatesumreviews,\n  populateReviews,\n  addReview,\n  setErrorsR,\n  deleteReview\n} = reviewcourseSlice.actions;\nexport default reviewcourseSlice.reducer;","map":{"version":3,"sources":["C:/Users/siwar/Desktop/front/src/redux/slices/reviewscourseSlice.js"],"names":["createSlice","queryApi","initialState","reviews","selectedReview","numberrating","errors","reviewcourseSlice","name","reducers","populateReviews","state","action","reviewscourse","payload","populatesumreviews","addReview","push","deleteReview","index","findIndex","review","_id","splice","setErrorsR","fetchReviews","idc","dispatch","res","error","console","log","fetchsumrating","selectReviewsCourse","selectsumreviews","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { queryApi } from \"../../utils/queryApi\";\r\nlet initialState = {\r\n    reviews: [],\r\n    selectedReview: {},\r\n    numberrating:0,\r\n    errors: \"\",\r\n    };\r\nconst reviewcourseSlice=createSlice({\r\n    name: \"reviewscourse\",\r\n    initialState,\r\n    reducers: {\r\n        populateReviews(state, action) {\r\n        state.reviewscourse = action.payload;\r\n        },\r\n        populatesumreviews(state, action) {\r\n            state.numberrating = action.payload;\r\n            },\r\n       \r\n        addReview: (state, action) => {\r\n            const payload = action.payload;\r\n            state.reviewscourse.push(payload);\r\n           \r\n            },\r\n        deleteReview: (state, action) => {\r\n            const payload = action.payload;\r\n            const index = state.reviewscourse.findIndex((review) => review._id === payload);\r\n            if (index !== -1) {\r\n                state.reviewscourse.splice(index, 1);\r\n                               }\r\n       },\r\n\r\n     \r\n         setErrorsR(state, action) {\r\n                 state.errors = action.payload;\r\n          },\r\n             },\r\n             \r\n        \r\n        });\r\n\r\nexport const fetchReviews=(idc)=>async(dispatch)=>{\r\n    const [res,error]=await queryApi(\"reviewc/\"+idc);\r\n    if(error){\r\n        console.log(error);\r\n    }\r\n    else{\r\n        dispatch(populateReviews(res));\r\n    }\r\n}\r\n\r\n\r\nexport const fetchsumrating=(idc)=>async(dispatch)=>{\r\n    const [res,error]=await queryApi(\"reviewc/average/\"+idc);\r\n    if(error){\r\n        console.log(error);\r\n    }\r\n    else{\r\n        dispatch(populatesumreviews(res));\r\n    }\r\n}\r\n\r\n\r\nexport const selectReviewsCourse=(state)=>{\r\n    return [state.reviewscourse.reviewscourse,state.reviewscourse.errors];\r\n}\r\n\r\nexport const selectsumreviews=(state)=>{\r\n    return [state.reviewscourse.numberrating,state.reviewscourse.errors];\r\n}\r\nexport const {populatesumreviews,populateReviews,addReview,setErrorsR,deleteReview}=reviewcourseSlice.actions;\r\nexport default reviewcourseSlice.reducer;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}