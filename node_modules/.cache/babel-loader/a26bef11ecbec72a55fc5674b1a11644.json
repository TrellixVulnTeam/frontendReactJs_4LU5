{"ast":null,"code":"import { BoxWithText } from '../classes/BoxWithText';\nimport { ObjectDetection } from '../classes/ObjectDetection';\nimport { PredictedBox } from '../classes/PredictedBox';\nimport { env } from '../env';\nimport { round } from '../utils';\nimport { drawBox } from './drawBox';\nimport { drawText } from './drawText';\nimport { getContext2dOrThrow } from './getContext2dOrThrow';\nimport { getDefaultDrawOptions } from './getDefaultDrawOptions';\nimport { resolveInput } from './resolveInput';\nexport function drawDetection(canvasArg, detection, options) {\n  var Canvas = env.getEnv().Canvas;\n  var canvas = resolveInput(canvasArg);\n\n  if (!(canvas instanceof Canvas)) {\n    throw new Error('drawDetection - expected canvas to be of type: HTMLCanvasElement');\n  }\n\n  var detectionArray = Array.isArray(detection) ? detection : [detection];\n  detectionArray.forEach(function (det) {\n    var _a = det instanceof ObjectDetection ? det.box : det,\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height;\n\n    var drawOptions = getDefaultDrawOptions(options);\n    var ctx = getContext2dOrThrow(canvas);\n    drawBox(ctx, x, y, width, height, drawOptions);\n    var withScore = drawOptions.withScore;\n    var text = det instanceof BoxWithText ? det.text : withScore && det instanceof PredictedBox ? \"\" + round(det.score) : det instanceof ObjectDetection ? \"\" + det.className + (withScore ? \" (\" + round(det.score) + \")\" : '') : '';\n\n    if (text) {\n      drawText(ctx, x, y + height, text, drawOptions);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/dom/drawDetection.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,wBAA5B;AACA,SAAS,eAAT,QAAgC,4BAAhC;AACA,SAAS,YAAT,QAA6B,yBAA7B;AAEA,SAAS,GAAT,QAAoB,QAApB;AACA,SAAS,KAAT,QAAsB,UAAtB;AACA,SAAS,OAAT,QAAwB,WAAxB;AACA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,YAAT,QAA6B,gBAA7B;AAGA,OAAM,SAAA,aAAA,CACJ,SADI,EAEJ,SAFI,EAGJ,OAHI,EAG0B;AAGtB,MAAA,MAAA,GAAA,GAAA,CAAA,MAAA,GAAA,MAAA;AAER,MAAM,MAAM,GAAG,YAAY,CAAC,SAAD,CAA3B;;AACA,MAAI,EAAE,MAAM,YAAY,MAApB,CAAJ,EAAiC;AAC/B,UAAM,IAAI,KAAJ,CAAU,kEAAV,CAAN;AACD;;AAED,MAAM,cAAc,GAAG,KAAK,CAAC,OAAN,CAAc,SAAd,IACnB,SADmB,GAEnB,CAAC,SAAD,CAFJ;AAIA,EAAA,cAAc,CAAC,OAAf,CAAuB,UAAC,GAAD,EAAI;AACnB,QAAA,EAAA,GAAA,GAAA,YAAA,eAAA,GAAA,GAAA,CAAA,GAAA,GAAA,GAAA;AAAA,QACJ,CAAA,GAAA,EAAA,CAAA,CADI;AAAA,QAEJ,CAAA,GAAA,EAAA,CAAA,CAFI;AAAA,QAGJ,KAAA,GAAA,EAAA,CAAA,KAHI;AAAA,QAIJ,MAAA,GAAA,EAAA,CAAA,MAJI;;AAON,QAAM,WAAW,GAAG,qBAAqB,CAAC,OAAD,CAAzC;AAEA,QAAM,GAAG,GAAG,mBAAmB,CAAC,MAAD,CAA/B;AACA,IAAA,OAAO,CACL,GADK,EAEL,CAFK,EAGL,CAHK,EAIL,KAJK,EAKL,MALK,EAML,WANK,CAAP;AASQ,QAAA,SAAA,GAAA,WAAA,CAAA,SAAA;AACR,QAAI,IAAI,GAAG,GAAG,YAAY,WAAf,GACP,GAAG,CAAC,IADG,GAEL,SAAS,IAAI,GAAG,YAAY,YAA7B,GACC,KAAG,KAAK,CAAC,GAAG,CAAC,KAAL,CADT,GAEE,GAAG,YAAY,eAAf,GACC,KAAG,GAAG,CAAC,SAAP,IAAmB,SAAS,GAAG,OAAK,KAAK,CAAC,GAAG,CAAC,KAAL,CAAV,GAAqB,GAAxB,GAA8B,EAA1D,CADD,GAEC,EANR;;AAUA,QAAI,IAAJ,EAAU;AACR,MAAA,QAAQ,CAAC,GAAD,EAAM,CAAN,EAAS,CAAC,GAAG,MAAb,EAAqB,IAArB,EAA2B,WAA3B,CAAR;AACD;AACF,GAlCD;AAmCD","sourceRoot":"","sourcesContent":["import { BoxWithText } from '../classes/BoxWithText';\r\nimport { ObjectDetection } from '../classes/ObjectDetection';\r\nimport { PredictedBox } from '../classes/PredictedBox';\r\nimport { env } from '../env';\r\nimport { round } from '../utils';\r\nimport { drawBox } from './drawBox';\r\nimport { drawText } from './drawText';\r\nimport { getContext2dOrThrow } from './getContext2dOrThrow';\r\nimport { getDefaultDrawOptions } from './getDefaultDrawOptions';\r\nimport { resolveInput } from './resolveInput';\r\nexport function drawDetection(canvasArg, detection, options) {\r\n    var Canvas = env.getEnv().Canvas;\r\n    var canvas = resolveInput(canvasArg);\r\n    if (!(canvas instanceof Canvas)) {\r\n        throw new Error('drawDetection - expected canvas to be of type: HTMLCanvasElement');\r\n    }\r\n    var detectionArray = Array.isArray(detection)\r\n        ? detection\r\n        : [detection];\r\n    detectionArray.forEach(function (det) {\r\n        var _a = det instanceof ObjectDetection ? det.box : det, x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n        var drawOptions = getDefaultDrawOptions(options);\r\n        var ctx = getContext2dOrThrow(canvas);\r\n        drawBox(ctx, x, y, width, height, drawOptions);\r\n        var withScore = drawOptions.withScore;\r\n        var text = det instanceof BoxWithText\r\n            ? det.text\r\n            : ((withScore && det instanceof PredictedBox)\r\n                ? \"\" + round(det.score)\r\n                : (det instanceof ObjectDetection\r\n                    ? \"\" + det.className + (withScore ? \" (\" + round(det.score) + \")\" : '')\r\n                    : ''));\r\n        if (text) {\r\n            drawText(ctx, x, y + height, text, drawOptions);\r\n        }\r\n    });\r\n}\r\n//# sourceMappingURL=drawDetection.js.map"]},"metadata":{},"sourceType":"module"}